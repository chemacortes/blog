<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hyperreals *R - Notas</title><link href="https://chemacortes.github.io/blog/" rel="alternate"></link><link href="https://chemacortes.github.io/blog/blog/feeds/notas.atom.xml" rel="self"></link><id>https://chemacortes.github.io/blog/</id><updated>2022-09-16T20:45:57+02:00</updated><subtitle>Quarks, bits y otras criaturas infinitesimales</subtitle><entry><title>Algoritmos y lenguaje</title><link href="https://chemacortes.github.io/blog/2022/09/16/algoritmos-y-lenguaje/" rel="alternate"></link><published>2022-09-16T20:45:57+02:00</published><updated>2022-09-04T13:22:24+02:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2022-09-16:/blog/2022/09/16/algoritmos-y-lenguaje/</id><summary type="html">&lt;p&gt;Hoy he leído que &amp;#8220;para entender un algoritmo lo mejor que se puede
hacer es abstraerse del lenguaje de programación todo lo posible&amp;#8221;. Aunque
entiendo que pueda ser un modo de aproximarse al algoritmo, no comparto del
todo esa&amp;nbsp;afirmación.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Los lenguajes de programación no son únicamente un medio de expresar un
algoritmo, que conociendo un lenguaje los conoces todos, que eres capaz de
programar en cualquier cosa. Así piensa quien no se ha molestado en salir de su
zona de comfort para aprender nuevos&amp;nbsp;lenguajes.&lt;/p&gt;
&lt;p&gt;Es como decir que para ser matemático te sobra con aprender Aritmética ya que el
resto de las matemáticas se pueden deducir por &amp;#8220;equivalencia&amp;#8221;. Aparte de
perderte gran parte del universo de las Matemáticas, estarías ignorando nuevos
enfoques para resolver&amp;nbsp;problemas.&lt;/p&gt;
&lt;p&gt;La realidad es que un lenguaje de programación es fruto de la experiencia
acumulada de todos los programadores que han ayudado en su diseño, en sus
librerías y en su colección de modismos (&lt;em&gt;idiomatics&lt;/em&gt;). Características
funcionales como la inmutabilidad, evaluación perezosa o propagación de efectos
influyen (y mucho) en la viabilidad de un algoritmo para llegar a su resolución.
De acuerdo que siempre es posible hacer todo en tu lenguaje preferido, pero
estarías ignorando nuevos enfoques para resolver problemas de gente más experta
que tú, además de perderte gran parte de ese universo que es la&amp;nbsp;programación.&lt;/p&gt;</content><category term="Notas"></category></entry><entry><title>Notas del blog</title><link href="https://chemacortes.github.io/blog/2022/09/04/notas-del-blog/" rel="alternate"></link><published>2022-09-04T10:49:59+02:00</published><updated>2022-09-04T21:07:36+02:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2022-09-04:/blog/2022/09/04/notas-del-blog/</id><summary type="html">&lt;p&gt;Añadida categoría &lt;a href="/category/notas/"&gt;&lt;strong&gt;Notas&lt;/strong&gt;&lt;/a&gt;
para seguimiento de la evolución de este&amp;nbsp;blog&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quiero dar algo más de dinamismo a este blog. Tengo muchos temas pendientes para
tratar, pero no consigo tiempo para poder redactar un artículo completo sobre
ello, así que muchos de estos temas se quedan en el cajón por tiempo&amp;nbsp;indefinido.&lt;/p&gt;
&lt;p&gt;Siguiendo como modelo algunos de los blogs que leo regularmente, me he decido a
añadir una nueva categoría llamada &amp;#8220;Notas&amp;#8221; donde ir añadiendo pequeñas cosas
como ideas que se me vayan ocurriendo, pequeños proyectos que vaya haciendo, así
como todas esas cosas que me hayan sido interesante de las que vea por ahí. Con
el tiempo, la idea es que estas notas vayan conformando artículos completos que
las sustituyan, por lo que será una categoría dinámica de la que aparezcan y
desaparezcan entradas, un buen medio de tantear la evolución de este&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;También será un modo de anunciar aquellos tema que estoy investigando por si
quieres participar con preguntas o sugerencias. Ya sabes que puedes usar
&lt;a href="https://disqus.com/"&gt;disqus&lt;/a&gt; para comentar las entradas de este blog, así como usar cualquiera de
las redes donde estoy presente y que puedes ver en el lateral&amp;nbsp;izquierdo.&lt;/p&gt;
&lt;p&gt;Si lo prefieres, te puedes subscribir al &lt;em&gt;feed&lt;/em&gt; de
&lt;a href="/feeds/notas.atom.xml"&gt;Notas&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Algunos temas&amp;nbsp;interesantes&lt;/h2&gt;
&lt;p&gt;Como adelanto de los temas que quiero tratar en el&amp;nbsp;blog:&lt;/p&gt;
&lt;h3&gt;Concurrencia&lt;/h3&gt;
&lt;p&gt;La &lt;strong&gt;concurrencia&lt;/strong&gt; es un tema muy amplio, a la vez que muy mal enfocado por la
programación tradicional. Suele ser origen de confusión y de muchos fallos de
ejecución que se podrían remediar usando algunas de los patrones existentes
según el uso que se quiera dar al&amp;nbsp;código.&lt;/p&gt;
&lt;p&gt;Quiero tratar aspectos desde el &lt;code&gt;asyncio&lt;/code&gt; de python y su sintaxis &lt;code&gt;async/await&lt;/code&gt;,
hasta frameworks populares como el &lt;span class="caps"&gt;ZIO&lt;/span&gt; para&amp;nbsp;scala.&lt;/p&gt;
&lt;h3&gt;Tooling&lt;/h3&gt;
&lt;p&gt;Existe una tendencia a la simplificación. Los lenguajes intentan reducir su
curva de aprendizaje para no desanimar a los principiantes, así como a disponer
de herramientas sencillas que permitan la instalación y actualización de
dependencias. Ello ha llevado a la aparición de las &lt;em&gt;toolings&lt;/em&gt;, conjunto de
utilidades sencillas capaces de acompañar al proceso de desarrollo desde la
creación del proyecto, la instalación de las librerías necesarias, depuración
del código y la generación del aplicativo final para su&amp;nbsp;distribución.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;WASM&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;WASM&lt;/span&gt;&lt;/strong&gt; o &lt;em&gt;webassembly&lt;/em&gt; es un modo de ejecutar código en un navegador más allá
del intérprete javascript. Alrededor de wasm se ha creado un ecosistema de
compiladores, intérpretes y librerías que dan idea del futuro de esta
tecnología. Una de las prometedoras es &lt;a href="https://pyscript.net/"&gt;pyscript&lt;/a&gt;, la posibilidad de ejecutar
python en un navegador y algunos de sus paquetes de cálculo numérico más&amp;nbsp;conocidos.&lt;/p&gt;
&lt;h3&gt;MicroOS&lt;/h3&gt;
&lt;p&gt;En sistemas, me interesa bastante los basado en contendores. Uno de los que
quiero probar es &lt;a href="https://microos.opensuse.org"&gt;openSuSE MicroOS&lt;/a&gt; y su idea de ser &lt;em&gt;&amp;#8220;inmutable&amp;#8221;&lt;/em&gt;. Me
recuerda mucho a otros sistemas como NixOS o&amp;nbsp;RancherOS.&lt;/p&gt;
&lt;h3&gt;Novedades en&amp;nbsp;lenguajes&lt;/h3&gt;
&lt;p&gt;También quiero comentar las novedades de scala 3, pero sin olvidar otros
lenguajes que estoy siguiendo como Python, Elm, Haskell o&amp;nbsp;Rust.&lt;/p&gt;</content><category term="Notas"></category></entry><entry><title>Scripting para scala</title><link href="https://chemacortes.github.io/blog/2021/10/17/scripting-para-scala/" rel="alternate"></link><published>2021-10-17T12:52:28+02:00</published><updated>2022-09-04T10:37:28+02:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2021-10-17:/blog/2021/10/17/scripting-para-scala/</id><summary type="html">&lt;p&gt;Unos pensamientos sobre mi actual decepción con python y porqué empiezo a usar más scala para tareas de &lt;em&gt;scripting&lt;/em&gt;.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Mi decepción con&amp;nbsp;python&lt;/h2&gt;
&lt;p&gt;Llevo mucho tiempo usando python como lenguaje de &lt;em&gt;scripting&lt;/em&gt;. Python se ha convertido para mí en un lenguaje imprescindible gracias a su completa librería estándar, así como a la infinidad de módulos para hacer cualquier&amp;nbsp;cosa.&lt;/p&gt;
&lt;p&gt;Voy siguiendo su evolución, las nuevas incorporaciones en su sintáxis, así como la evolución de sus herramientas emblemáticas como &lt;em&gt;jupyter&lt;/em&gt; o &lt;em&gt;pandas&lt;/em&gt;, y herramientas de desarrollo como &lt;em&gt;pyenv&lt;/em&gt; o &lt;em&gt;poetry&lt;/em&gt;. No es extraño que se haya convertido en el lenguaje de programación más popular en estos momentos, algo que nadie me creía hace algunos años cuando decía que iba a desbancar a Perl, Ruby y &lt;span class="caps"&gt;PHP&lt;/span&gt;, e incluso a Java o&amp;nbsp;C/C++.&lt;/p&gt;
&lt;p&gt;A pesar de esta popularidad de python, y de que cuento en mi arsenal con bastante código que uso a diario, me canso de ver lo mal que se está programando en general con python. De acuerdo que no es un &lt;em&gt;lenguaje funcional&lt;/em&gt;, como me gustaría que fuera, pero es no se están usando muchas características del lenguaje que harían un código python más expresivo y&amp;nbsp;mantenible.&lt;/p&gt;
&lt;p&gt;En particular, me pasa siempre que veo que alguien usa el método &lt;code&gt;.append()&lt;/code&gt; en las listas. Casi con toda probabilidad, está intentando crear una lista añadiendo los elementos uno a uno, tal como ha aprendido en otros lenguajes de estilo imperativo, en vez de usar las &lt;em&gt;compresiones de listas&lt;/em&gt;, más eficientes y más simples de trabajar. Lo malo es que cuando hago ver que se puede mejorar ese código me responden que es mejor no usar características propias de python que nadie&amp;nbsp;conoce.&lt;/p&gt;
&lt;p&gt;Puede ser discutible si hay que dejar de usar características de python sólo para hacerlo más accesible al público general. Lo que no entiendo es que se esté usando esa excusa para no dedicar esfuerzo en sacar todo el potencial que ofrece python, ni para aprender otros lenguajes de programación que enseñen maneras distintas de programar a lo básico aprendido en clase. Se está enseñando un único modo de programar (imperativo), haciendo creer que tiene que ser el mejor modo, y no lo&amp;nbsp;es.&lt;/p&gt;
&lt;p&gt;Mi impresión, ahora mismo, es que da igual si sale una nueva versión de python, si se incorpora sintáxis para programación asíncrona o si se se mejora el tipado gradual con &lt;em&gt;clases abstractas&lt;/em&gt;. Una gran mayoría seguirá programando python del mismo modo que aprendieron hace años, sin ver necesidad de cambiar nada en su estilo de&amp;nbsp;programar.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;Tooling&lt;/em&gt; para&amp;nbsp;scala&lt;/h2&gt;
&lt;p&gt;Scala es uno de mis lenguajes favoritos. Hace muy poco ha salido la versión 3 (aka &lt;em&gt;dotty&lt;/em&gt;), más fácil de usar y más potente en algunos aspectos. Ha roto con las limitaciones que le imponía la máquina java para convertirse en un &lt;em&gt;metalenguaje&lt;/em&gt; (Algún día tengo que hablar de &lt;a href="https://docs.scala-lang.org/scala3/guides/tasty-overview.html" title="Typed Abstract Syntax Trees"&gt;TASTy&lt;/a&gt; y la &lt;em&gt;metaprogramación&lt;/em&gt; en scala). Se han aunado esfuerzos en dotar a scala de herramientas de desarrollo excelentes, así como en poder aplicarlo al desarrollo java, graalvm, web (javascript), android o llvm (&lt;em&gt;native scala&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Por el lado práctico, la nueva sintáxis de scala3 se aproxima mucho a python. Herramientas como &lt;em&gt;jupyter&lt;/em&gt; puede incluir kernels de scala. La comunidad Scala ha creado librerías que emulan en funcionamiento a las conocidas &lt;code&gt;requests&lt;/code&gt;, &lt;code&gt;pathlib&lt;/code&gt; o &lt;code&gt;pandas&lt;/code&gt; de python, por nombrar unas pocas. Si no es suficiente, &lt;a href="https://scalapy.dev/"&gt;scalapy&lt;/a&gt; permite integrar python en scala, abriendo a scala todo el arsenal de&amp;nbsp;python.&lt;/p&gt;
&lt;p&gt;Sin duda, scala se ha convertido en un lenguaje a tener en cuenta. No sólo como un lenguaje &lt;em&gt;&amp;#8220;java mejorado&amp;#8221;&lt;/em&gt;, como muchos lo han calificado. Cuenta con potentes herramientas para &lt;em&gt;scripting&lt;/em&gt; y desarrollo en general que vale la pena conocer. Pero no sólo eso, también se situa en la vanguardia de una nueva generación de compiladores que añade innovaciones como no se han visto en ningún otro&amp;nbsp;lenguaje.&lt;/p&gt;
&lt;p&gt;Mi intención es ir mostrando en este blog algunas herramientas de scala a medida que yo mismo las estudio. De momento, las pruebas que he hecho hasta ahora han sido exitosas, siendo muy cómodo usar scala para scripting, tanto como era python. Mi objetivo final es sustituir, poco a poco, los scripts de python por scala, o intentar combinarlos, ya&amp;nbsp;veré.&lt;/p&gt;
&lt;!-- markdownlint-disable MD036 --&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;And Now for Something Completely&amp;nbsp;Different&amp;#8230;&lt;/em&gt;&lt;/p&gt;</content><category term="Notas"></category><category term="python"></category><category term="scala"></category><category term="scripting"></category></entry><entry><title>Reorientando el blog</title><link href="https://chemacortes.github.io/blog/2021/02/01/reorientando-el-blog/" rel="alternate"></link><published>2021-02-01T21:00:00+01:00</published><updated>2022-09-04T10:37:28+02:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2021-02-01:/blog/2021/02/01/reorientando-el-blog/</id><summary type="html">&lt;p&gt;Sobre este blog, lo último que he estado investigando y a hacia dónde pienso que irá la&amp;nbsp;programación.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Año 2020&lt;/strong&gt; Un año en el que parece que han pasado muchas cosas, pero que en
realidad no han pasado tantas cosas. Todo se quedó suspendido en espera de
mejores&amp;nbsp;tiempos.&lt;/p&gt;
&lt;p&gt;He aprovechado este año para descubrir algunos lenguajes de programación y
tecnologías que, en mi opinión, han de crecer mucho en los próximos años.
También me ha dado tiempo de reflexionar del modo en que se está programando
actualmente y convencerme de lo imposible que es que se cambien algunas&amp;nbsp;cosas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;La programación ha sucumbido al &lt;em&gt;formalismo&lt;/em&gt;&lt;/strong&gt;. Grupos de trabajo
interdisciplinares se basan en el tradicional modo imperativo de programar, via
común para compartir conocimientos y proponer nuevas ideas. Las ideas
&lt;em&gt;funcionales&lt;/em&gt; no tienen cabida y se ven exóticas, incluso contraproducentes para
espíritu colaborativo. Las optimizaciones se centran en mejorar la ejecución de
un programa y ningún esfuerzo se emplea en su correcta formulación matemática.
Como consecuencia, los errores son imprevisibles y difíciles de corregir, algo
que se asume como normal, sin ningún fundamento matemático que guíe el&amp;nbsp;desarrollo.&lt;/p&gt;
&lt;p&gt;Las reflexiones que pongo a continuación solo buscan crear algo de curiosidad en
el lector. Ya no busco convencer a nadie. Dentro de lo posible, ampliaré estos
temas en próximas entradas en el blog, aunque serán casi más pensamientos
fugaces que artículos&amp;nbsp;completos.&lt;/p&gt;
&lt;h2&gt;Principios&lt;/h2&gt;
&lt;p&gt;Aunque suene a &lt;em&gt;perogrullo&lt;/em&gt;, cuando se produce un fallo en una aplicación es
casi siempre por una condición que no se tuvo en cuenta. Se tratan de
excepciones que no son interceptadas, alguna entrada inesperada para la que no
se escribió un tratamiento, etc, etc. En entornos multitareas, se suma la poca
previsión que se tiene para compartir recursos entre tareas, faltando capacidad
para ver la historia completa de la interacción de todas las&amp;nbsp;tareas.&lt;/p&gt;
&lt;p&gt;Es muy dificil escribir un programa que no falle. Pero sí que se pueden seguir
pautas que ayuden a minimizar el impacto, sobre todo que ayuden a prever desde
el primer momento los posibles fallos. Los compiladores son cada vez más
inteligentes y los entornos de desarrollo ofrecen al instante ayudas para
corregir posibles fallos en el&amp;nbsp;código.&lt;/p&gt;
&lt;p&gt;De mi experiencia personal con varios lenguajes de programación, creo que hay
algunas características que debe tener un lenguaje de programación para evitar
errores. No son exactamente características que hagan más fácil la programación,
por lo que costará que un programador las tenga en cuenta. Algunas requierán
tener bastante disciplina; en cambio otras implica tener que cambiar de lenguaje
de&amp;nbsp;programación.&lt;/p&gt;
&lt;h3&gt;Tipado de&amp;nbsp;datos&lt;/h3&gt;
&lt;p&gt;Es muy pesado expresar siempre el tipo de dato de todos y cada uno de los
objetos que usamos en un código. Hay veces que incluso no conocemos qué tipos
van a tener hasta el momento de ejecutar el&amp;nbsp;código.&lt;/p&gt;
&lt;p&gt;En general, tenemos dos&amp;nbsp;estrategias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tipado estricto: donde se indica explícitamente el tipo de todos los&amp;nbsp;objetos&lt;/li&gt;
&lt;li&gt;Tipado gradual: donde se indica el tipo de algunos objetos como&amp;nbsp;anotación&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hoy en día, algunos lenguajes con tipado estricto (eg: scala) poseen &lt;em&gt;inferencia
de tipos&lt;/em&gt;, o lo que es lo mismo, son capaces de determinar el tipo de dato a
partir del contexto, lo que hace más cómodo programar con&amp;nbsp;ellos.&lt;/p&gt;
&lt;p&gt;Para lenguajes de tipado gradual (eg: python), también existen herramientas de
desarrollo capaces de inferir el tipo de dato, mostrando opciones para hacerlo&amp;nbsp;explícito.&lt;/p&gt;
&lt;p&gt;La sensación es que ambas estrategias tienden a coincidir, requiriendo
únicamente expresar aquellos tipos que sean más importantes o que pueden influir
significativamente en el resto del&amp;nbsp;programa.&lt;/p&gt;
&lt;p&gt;Sin embargo, hay una gran ventaja al contar con un sistema de tipos estrictos:
los &lt;a href="https://en.wikipedia.org/wiki/Algebraic_data_type"&gt;&lt;em&gt;tipos algebraicos&lt;/em&gt;&lt;/a&gt;. Normalmente, los cambios de estado requieren de
una programación meticulosa para no dejar ningún caso sin cubrir, siendo
complicados de mantener sin cometer errores. Con los tipos algebraicos se puede
modelizar la lógica existente en los cambios de estado, asegurando que no queda
ningún caso sin&amp;nbsp;cubrir.&lt;/p&gt;
&lt;h3&gt;Programación&amp;nbsp;funcional&lt;/h3&gt;
&lt;p&gt;He hablado bastante en este blog sobre mi predilección por la &lt;em&gt;programación
funcional&lt;/em&gt;. Podemos destacar algunas características como el uso para todo de la
recursividad, no tener variables, todo es inmutable sin efectos colaterales,
etc. Pero si hay una cosa que la define sobre todas las demás es la capacidad
para retrasar la evaluación y las excepciones hasta el momento que sea&amp;nbsp;necesario.&lt;/p&gt;
&lt;p&gt;La capacidad de &lt;em&gt;diferir&lt;/em&gt;, además de ahorrar en cálculos innecesarios, permite
realizar un mejor seguimiento paso a paso de un código, lo que mejora nuestra
capacidad de comprender y razonar sobre su&amp;nbsp;funcionamiento.&lt;/p&gt;
&lt;h3&gt;Concurrencia&lt;/h3&gt;
&lt;p&gt;Hay muchos mitos alrededor de la concurrencia. El más común es pensar que puedes
programar igual si hay un hilo de ejecución como si hay muchos. También está el
que confunde paralelizar la ejecución con paralelizar los datos. Como se suele
decir, no existe &lt;em&gt;una bala de plata&lt;/em&gt; que sirva para todos los casos. En
concurrencia, cada problema tiene una solución&amp;nbsp;distinta.&lt;/p&gt;
&lt;p&gt;Necesitamos poder &lt;em&gt;razonar&lt;/em&gt; sobre el funcionamiento de un código en
concurrencia, algo muy dífícil si no usas programación&amp;nbsp;funcional.&lt;/p&gt;
&lt;p&gt;Hay muchos lenguajes que aseguran ser los mejores para programación en
concurrencia. En mi opinión, ninguno es capaz de dar una solución, aunque
algunos se aproximan más que otros. Intentaré dar algunas comparativas en
próximos&amp;nbsp;artículos.&lt;/p&gt;
&lt;h2&gt;Lenguajes&lt;/h2&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;Hoy en día, python se ha hecho popular entre iniciados a la programación y
programadores científicos. Se puede llegar a decir que &lt;strong&gt;&lt;em&gt;&amp;#8220;no has entendido un
código si no lo puedes explicar con python&amp;#8221;&lt;/em&gt;&lt;/strong&gt;. Es por ello que intentaré
expresar algunos conceptos en python, a pesar de sus limitaciones para algunas
tareas. Servirá de comparación con el modo que usan otros lenguajes para ofrecer
algunas&amp;nbsp;soluciones.&lt;/p&gt;
&lt;p&gt;De todos modos, me dicen mucho que mi código python no parece código python. En
realidad, no hago más que aplicar el conocido como &lt;em&gt;&amp;#8220;estilo pythónico&amp;#8221;&lt;/em&gt; y que
ayuda a crear código más simple y mantenible. Lamentablemente, hay muchos
programadores python que desconocen toda la potencia que tiene el lenguaje y
algunos módulos de su librería estándar que simplifican mucho algunas&amp;nbsp;tareas.&lt;/p&gt;
&lt;h3&gt;Haskellers&lt;/h3&gt;
&lt;p&gt;Bajo la denominación de &lt;em&gt;&amp;#8220;haskeller&amp;#8221;&lt;/em&gt; me refiero a varios lenguajes basado en
haskell y su&amp;nbsp;ecosistema.&lt;/p&gt;
&lt;p&gt;El lenguaje &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt; surge como &lt;em&gt;framework&lt;/em&gt; para crear aplicaciones webs cliente
que corran en el navegador (javascript). Su modelo de funcionamiento, llamado
&lt;strong&gt;&lt;span class="caps"&gt;TEA&lt;/span&gt;&lt;/strong&gt; por &lt;em&gt;&amp;#8220;The Elm Architecture&amp;#8221;&lt;/em&gt;, simplifica la creación de webs dinámicas,
desacoplando la lógica de la visualización, minimizando la posibilidad de
cometer&amp;nbsp;errores.&lt;/p&gt;
&lt;p&gt;Elm es uno de los descubrimientos de este año. Es divertido crear aplicaciones
con este lenguaje y realmente ayuda a cometer muchos menos errores. Lo único
malo son &lt;a href="https://lukeplant.me.uk/blog/posts/why-im-leaving-elm/"&gt;algunas dudas&lt;/a&gt; sobre las decisiones que están tomando sus
diseñadores sobre su futuro, algo que no ayuda mucho para su adopción en
sistemas en&amp;nbsp;producción.&lt;/p&gt;
&lt;p&gt;Aún así, Elm es un referente que recomiendo y del que se están inspirando muchos
frameworks para otros&amp;nbsp;lenguajes.&lt;/p&gt;
&lt;p&gt;Una alternativa directa a elm sería &lt;a href="https://www.purescript.org/"&gt;purescript&lt;/a&gt;, considerado como el &lt;em&gt;haskell
para javascript&lt;/em&gt;. Tiene varios frameworks web, algunos inspirados en la
arquitectura elm. No obstante, la curva de aprendizaje es algo mayor, sin
conseguir la misma&amp;nbsp;funcionalidad.&lt;/p&gt;
&lt;p&gt;Otra sorpresa ha sido el framework &lt;a href="https://ihp.digitallyinduced.com/"&gt;&lt;span class="caps"&gt;IHP&lt;/span&gt;&lt;/a&gt;, un &lt;span class="caps"&gt;MVC&lt;/span&gt; programado en haskell. Posee
un interface administrativo, muy similar al de django, desde el que se puede
gestionar la base de datos, así como generar código haskell para los distintos
elementos. Su gestión de dependencias se hace a través de &lt;a href="https://nixos.org/"&gt;nix&lt;/a&gt;, lo que
garantiza la reproducibilidad y los despliegues&amp;nbsp;seguros.&lt;/p&gt;
&lt;p&gt;A partir de una serie de artículos sobre la &lt;a href="https://driftercode.com/blog/ihp-with-elm-series/"&gt;creación widgets en elm para
&lt;span class="caps"&gt;IHP&lt;/span&gt;&lt;/a&gt;, se pueden considerar el dúo &lt;span class="caps"&gt;IHP&lt;/span&gt;/elm como el entorno fullstack ideal
para programadores&amp;nbsp;haskell.&lt;/p&gt;
&lt;h3&gt;Elixir&lt;/h3&gt;
&lt;p&gt;Dentro de las opciones funcionales, también he mirado algo de &lt;a href="https://elixir-lang.org/"&gt;elixir&lt;/a&gt; y su
framework &lt;a href="https://www.phoenixframework.org/"&gt;phoenix&lt;/a&gt;. Tienen fama de soportar grandes cargas de trabajo y
seguir ofreciendo alta disponibilidad, aunque estoy convencido que hay
soluciones similares en otros lenguajes (eg: go). De momento, lo tengo&amp;nbsp;aparcado.&lt;/p&gt;
&lt;h3&gt;Otros&amp;nbsp;lenguajes&lt;/h3&gt;
&lt;p&gt;No me olvido de lenguajes como scala o coconut, de los que he hablado mucho en
este blog. En el caso de scala está a punto de salir la versión 3, cuyo
compilador se conoce como &lt;em&gt;dotty&lt;/em&gt; y que será un gran avance para este&amp;nbsp;lenguaje.&lt;/p&gt;
&lt;p&gt;Rust también tiene bastante interés. Su &lt;em&gt;toolchain&lt;/em&gt; para &lt;em&gt;webassembly&lt;/em&gt; (&lt;em&gt;wasm&lt;/em&gt;)
lo posiciona como el lenguaje para programar componentes web nativos (no
javascript). Sería posible crear &lt;em&gt;frontend&lt;/em&gt; en el navegador programados con elm
para manejar el entorno gráfico (árbol &lt;span class="caps"&gt;DOM&lt;/span&gt;) y usar rust/wasm para los módulos
que requieran cálculo intensivo. De rust también es interesante su sistema de
&lt;em&gt;préstamo&lt;/em&gt; de variables que evitar errores al compartir variables en
concurrencia y que hace innecesario un recolector de&amp;nbsp;basura.&lt;/p&gt;
&lt;p&gt;Otro lenguaje que he retomado es racket. Es un lenguaje funcional tipo lisp o
scheme. Lo que lo diferencia es que se puede usar para crear nuevos lenguajes.
Es lo que se conoce por &lt;em&gt;&amp;#8220;Programación orientada al lenguaje&amp;#8221;&lt;/em&gt; (&lt;span class="caps"&gt;LOP&lt;/span&gt; -
Language-oriented Programming). La idea es crear un lenguaje próximo al usuario
con el que pueda describir los requisitos que ha de tener una aplicación y que
podamos usar como &lt;em&gt;&amp;#8220;contrato&amp;#8221;&lt;/em&gt; de lo que tiene que hacer una&amp;nbsp;aplicación.&lt;/p&gt;
&lt;p&gt;Existe algo similar ofrecido por Jetbrain, el &lt;a href="https://www.jetbrains.com/mps/"&gt;&lt;span class="caps"&gt;MPS&lt;/span&gt;&lt;/a&gt;. Está mejor documentado y
el entorno &lt;span class="caps"&gt;IDE&lt;/span&gt; es inmejorable. Seguramente empiece por&amp;nbsp;él.&lt;/p&gt;
&lt;p&gt;También habrá espacio para la &lt;em&gt;metaprogramación&lt;/em&gt;. Lo pongo casi al final puesto
que será el tema del próximo artículo, que no tardará&amp;nbsp;mucho.&lt;/p&gt;
&lt;h3&gt;Tiddlywiki&lt;/h3&gt;
&lt;p&gt;Por último, otra de las locuras en las que estoy metido es en la programación de
entornos de desarrollo para &lt;a href="https://tiddlywiki.com/"&gt;tiddlywiki&lt;/a&gt;. Lo normal en tiddlywiki es tener un
fichero html que incluye todo el código javascript junto con los contenidos
(&lt;em&gt;tiddlers&lt;/em&gt;). Pero también se puede tener un entorno node de trabajo que permite
realizar algunas tareas y lanzar algunos&amp;nbsp;scripts.&lt;/p&gt;</content><category term="Notas"></category><category term="functional-programming"></category><category term="python"></category><category term="algebraic-data-type"></category><category term="haskell"></category><category term="elm"></category><category term="ihp"></category><category term="nix"></category><category term="purescript"></category><category term="elixir"></category><category term="phoenix"></category><category term="go"></category><category term="racket"></category><category term="lop"></category><category term="mps"></category><category term="tiddlywiki"></category><category term="metaprogramming"></category></entry><entry><title>Reinicio 2018</title><link href="https://chemacortes.github.io/blog/2018/07/22/reinicio-2018/" rel="alternate"></link><published>2018-07-22T11:40:51+02:00</published><updated>2022-09-04T10:37:28+02:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2018-07-22:/blog/2018/07/22/reinicio-2018/</id><summary type="html">&lt;p&gt;Después de mucho tiempo, vuelvo a escribir en este blog. No tenía mucho qué decir, pero es posible que haya llegado el momento de&amp;nbsp;hacerlo.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hacía mucho que no escribía en este blog. La razón principal es que no tenía mucho que decir. Lo poco que podía contribuir lo he ido haciendo en otros ámbitos de internet y no había nada más que añadir con un mínimo&amp;nbsp;interés.&lt;/p&gt;
&lt;p&gt;En este tiempo, he seguido profundizando más en la programación funcional de la mano de &lt;a href="https://scala-lang.org"&gt;scala&lt;/a&gt; y &lt;a href="https://haskell.org"&gt;haskell&lt;/a&gt;, he mirado novedades en varios lenguajes (&lt;a href="https://python.org"&gt;python&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org/"&gt;typescript&lt;/a&gt;,..) y he probado algunas de las tecnologías más populares en estos momentos (docker, angular, raspberry,&amp;nbsp;etc).&lt;/p&gt;
&lt;p&gt;Sin embargo, sigo notado que se programa desastrosamente para &lt;strong&gt;concurrencia&lt;/strong&gt;. Un programador, además de saber programar, debería ser capaz de razonar sobre las particularidades del entorno de ejecución que afectarán a su programa. De igual modo que es capaz de usar algoritmos para optimizar el uso de memoria y reducir el consumo de &lt;span class="caps"&gt;CPU&lt;/span&gt;, también debería ser capaz de sincronizar los distintos hilos de ejecución y saber cómo crear &lt;em&gt;&amp;#8220;transacciones atómicas&amp;#8221;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sobre todo, algo a tener claro en concurrencia es que &lt;strong&gt;&amp;#8220;&lt;span class="caps"&gt;NO&lt;/span&gt; &lt;span class="caps"&gt;EXISTE&lt;/span&gt; &lt;span class="caps"&gt;UNA&lt;/span&gt; SOLUCIÓN &lt;span class="caps"&gt;PARA&lt;/span&gt; &lt;span class="caps"&gt;TODO&lt;/span&gt;&amp;#8221;&lt;/strong&gt;. Cada caso tiene una solución distinta que requerirá de estudio previo y una solución acorde al problema. Y para eso hay que aprender a&amp;nbsp;razonar.&lt;/p&gt;
&lt;div class="admonition info"&gt;
&lt;p&gt;&lt;strong&gt;Si no entiendes el problema, el lenguaje no te dará la&amp;nbsp;solución&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Personalmente, sigo pensando que debería cambiarse la &lt;em&gt;Enseñanza Tradicional de la Programación&lt;/em&gt;. Cambiar lenguajes dinámicos y variables globales por lenguajes funcionales y sistemas de tipos. Aprender nuevos modos de hacer las&amp;nbsp;cosas.&lt;/p&gt;
&lt;p&gt;En&amp;nbsp;definitiva:&lt;/p&gt;
&lt;div class="admonition info"&gt;
&lt;p&gt;&lt;strong&gt;Más matemáticas y menos&amp;nbsp;ingeniera&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;</content><category term="Notas"></category><category term="concurrency"></category></entry><entry><title>Renacimiento</title><link href="https://chemacortes.github.io/blog/2016/01/10/renacimiento/" rel="alternate"></link><published>2016-01-10T15:51:06+01:00</published><updated>2016-01-10T15:51:06+01:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2016-01-10:/blog/2016/01/10/renacimiento/</id><summary type="html">&lt;p&gt;Pensamientos de lo hecho estos años y qué espero del&amp;nbsp;futuro&lt;/p&gt;</summary><content type="html">&lt;p&gt;Si eres uno de los pocos seguidores de este blog, habrás notado que se migrado a un nuevo servidor y un nuevo &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;He tenido el blog bastante abandonado. Podría decirse que no tenía nada interesante qué decir en este tiempo, pero la verdad es que  he preferido contar lo poco que tenía que contar a través de &lt;a href="https://twitter.com"&gt;twitter&lt;/a&gt; y otras vías&amp;nbsp;alternativas.&lt;/p&gt;
&lt;p&gt;Si esperas que continúe con los artículos de &lt;a href="http://python.org"&gt;Python&lt;/a&gt;, es posible que no lo haga. Últimamente, estoy bastante defraudado con los programadores que se acercan a este lenguaje. Puede que sea por haberse convertido en un lenguaje tan popular, algo que siempre es bueno. Pero echo mucho de menos el &lt;em&gt;&amp;#8220;modo pythónico&amp;#8221;&lt;/em&gt; que influía en todo lo que se hacía para este lenguaje en sus principios. Ahora parece como que haya que programar para que lo entiendan incluso los que no saben python. Se evitan usar compresiones de listas o expresiones generadoras porque son técnicas demasiado avanzadas, y las novedades que introduce python3 parece como que haya que evitarlas. Me parece &lt;em&gt;simplemente absurdo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Creo que python es un lenguaje genial para &lt;em&gt;scripting&lt;/em&gt;, con ámbitos de aplicación que abarcan desde gestión de sistemas a aplicaciones científicas. &lt;em&gt;Un lenguaje para gobernarlos a todos&lt;/em&gt;. Pero necesita evolucionar, y necesita un mejor sistema de tipos. El &lt;em&gt;tipado gradual&lt;/em&gt; es imprescindible y debería ser aceptado por la comunidad de programadores python cuanto antes (tema que espero tratar en algún próximo&amp;nbsp;artículo).&lt;/p&gt;
&lt;p&gt;Sigo usando mucho python. De hecho, este blog está ahora creado con &lt;a href="http://getpelican.com/"&gt;pelican&lt;/a&gt;, un generador estático de páginas html. También me ayudo de varias herramientas python en tareas tales como el &lt;em&gt;push&lt;/em&gt; al repositorio de github donde alojo ahora el blog (posiblemente, también sea objeto de un nuevo artículo cómo lo hago). Por si fuera poco, también uso &lt;a href="https://wiki.gnome.org/Apps/Gedit/" title="Gnome Editor"&gt;gedit&lt;/a&gt; para editar el texto, donde estoy incorporado algunos &lt;em&gt;snippets&lt;/em&gt; en python para dar formato al texto &lt;em&gt;markdown&lt;/em&gt; (vale, tomo nota para otro&amp;nbsp;artículo).&lt;/p&gt;
&lt;p&gt;Este último año, creo que el lenguaje en el que más he programado ha sido &lt;a href="https://www.haskell.org/"&gt;haskell&lt;/a&gt;. Aunque ya muchos años, es en estos momentos cuando se está produciendo un autentico &lt;em&gt;&amp;#8220;Renacimento&amp;#8221;&lt;/em&gt; de este lenguaje. De modo similar al periodo histórico, están surgiendo alrededor de este lenguaje verdaderos &lt;em&gt;hombres del renacimiento&lt;/em&gt; que combinan disciplinas tales como Matemáticas, Filosofía y Ciencias &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. Una auténtica ágora virtual de pensadores alrededor de la programación abstracta que no debería perderse nadie interesado en estos&amp;nbsp;temas.&lt;/p&gt;
&lt;p&gt;La verdad es que la vejez de haskell se nota en algunos problemas de dependencias entre módulos y la carencia de herramientas de desarrollo modernas. Se está trabajando mucho en hacer de haskell una herramienta con suficiente &lt;em&gt;&amp;#8220;calidad industrial&amp;#8221;&lt;/em&gt; como para ser alternativa empresarial a cualquier otro lenguaje de programación &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Aún con todo, sigo programando en &lt;a href="http://scala-lang.org/"&gt;scala&lt;/a&gt;. Es el lenguaje con el que me siento más cómodo. Este último año ha estado marcado por la popularización del &lt;abbr title="compilador código fuente a código fuente"&gt;transpiler&lt;/abbr&gt; &lt;a href="http://www.scala-js.org/"&gt;scala.js&lt;/a&gt; para javascript, algo que está atrayendo más desarrolladores a scala que su contraparte para &lt;abbr title="Java Virtual Machine"&gt;&lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/abbr&gt;. Tengo intención de realizar algunos desarrollos para Angular o React con scala.js y pronto podré contar algunas cosas&amp;nbsp;más.&lt;/p&gt;
&lt;p&gt;También este último año he estado usando bastante &lt;a href="https://github.com/alexarchambault/jupyter-scala"&gt;jupyter-scala&lt;/a&gt;, un kernel scala para el &lt;a href="http://jupyter.org/"&gt;jupyter-notebook&lt;/a&gt;, para la realización de diversos ejercicios de bioinformática. Toda una gozada de usar y, sobre todo, de tener documentados todos los pasos que iba dando. Si os interesa la bioinformática, os recomiendo la serie &lt;span class="caps"&gt;MOOC&lt;/span&gt; sobre &lt;a href="https://www.coursera.org/specializations/bioinformatics"&gt;bioinformática&lt;/a&gt; de la UCSanDiego, unos cursos prácticos donde se combina la algorítmica con los distintos descubrimientos que se han ido produciendo en biología genética. &lt;em&gt;Clases magistrales de hacking del bueno&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Pero si hay algo que me sigue entusiasmando de scala es la gran cantidad de avances técnicos que tiene. El compilador de scala es, en mi opinión, uno de los mejores que existe. Innovaciones como &lt;em&gt;&amp;#8220;macros&amp;#8221;&lt;/em&gt;, programación genérica con &lt;a href="http://typelevel.org/"&gt;shapeless&lt;/a&gt;, las &lt;a href="http://akka.io/"&gt;akka-streams&lt;/a&gt; para microservicios o la reciente &lt;a href="http://rapture.io/"&gt;rapture.io&lt;/a&gt;, con una &lt;span class="caps"&gt;API&lt;/span&gt; magistralmente diseñada, da idea del dinamismo que tiene este lenguaje. Algo que cuesta ver en otros&amp;nbsp;lenguajes.&lt;/p&gt;
&lt;p&gt;En fin. Espero poner en claro mucho de lo dicho aquí. También espero que mis nuevas entradas en el blog sean más frecuente. Hasta&amp;nbsp;pronto.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Sin menoscabo de otras expresiones artísticas como &lt;a href="http://haskell.cs.yale.edu/?post_type=publication&amp;amp;p=112"&gt;The Haskell School of Music&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Una de la empresas que más está dinamizando haskell es &lt;a href="https://www.fpcomplete.com/"&gt;FPComplete&lt;/a&gt;, introduciendo haskell en los desarrollos para las grandes empresas.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Notas"></category><category term="python"></category><category term="haskell"></category><category term="scala"></category></entry><entry><title>Balance y cierre de ejercicio</title><link href="https://chemacortes.github.io/blog/2013/06/22/balance-y-cierre-de-ejercicio/" rel="alternate"></link><published>2013-06-22T14:51:00+02:00</published><updated>2013-06-22T14:51:00+02:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2013-06-22:/blog/2013/06/22/balance-y-cierre-de-ejercicio/</id><summary type="html">&lt;p&gt;Ya sé que parece extraño cerrar un periodo en mitad de año, pero los que me siguen de aquí a unos años sabrán que suelo hacer un breve resumen de situación comentando qué he estado haciendo y qué proyectos futuros estoy&amp;nbsp;ideando.&lt;/p&gt;
&lt;p&gt;Como puse en el último &lt;em&gt;twitt&lt;/em&gt;, parece que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya sé que parece extraño cerrar un periodo en mitad de año, pero los que me siguen de aquí a unos años sabrán que suelo hacer un breve resumen de situación comentando qué he estado haciendo y qué proyectos futuros estoy&amp;nbsp;ideando.&lt;/p&gt;
&lt;p&gt;Como puse en el último &lt;em&gt;twitt&lt;/em&gt;, parece que voy a cambiar de trabajo. Después de 20 años dedicados a la sanidad pública, pasaré a trabajar para la gestión informática de la educación pública. Ya sé que son dos de los sectores públicos más castigados por los recortes presupuestarios, pero al menos queda algo, no como en el resto de&amp;nbsp;departamentos.&lt;/p&gt;
&lt;p&gt;Lo primero de todo es volver a afirmar una vez más que &lt;strong&gt;no voy a dejar python&lt;/strong&gt;. Agradezco los mensajes de ánimo para que continúe participando en la comunidad hispana de python, incluso alguna que otra oferta para trabajar en proyectos punteros. No voy a abandonar python, tan sólo se me ha quedado pequeño. Ahora cierro el año que me dí para hacerme experto programador en scala y este año que viene haré lo propio con&amp;nbsp;R.&lt;/p&gt;
&lt;p&gt;Hace varios años que no programaba nada en python para el trabajo. En realidad, mi labor ha consistido en mantener y terminar proyectos que dejaban inconclusos las empresas externas que iban quebrando y que dejaban todo sin documentar y sin metodología alguna. Ha sido mucho código &lt;em&gt;&amp;#8220;desestructurado&amp;#8221;&lt;/em&gt; el que he tenido que leer y entender. Lo peor es que la actual situación económica de la administración pública no permite configurar un equipo de desarrolladores capaces de abarcar estos proyectos y, peor áun, si algún día salimos de la crisis y la administración pública vuelve a disponer de medios económicos, en primer lugar no habrá gente capacitada (habrán huido del pais si son inteligentes). Lo segundo, los dirigentes políticos no confían en sus funcionarios y optan por sacar estas funciones del control público a empresas externas que puedan manipular y de las que puedan beneficiarse en&amp;nbsp;exclusiva.&lt;/p&gt;
&lt;p&gt;Porque hay que decirlo bien claro: &lt;strong&gt;los datos de la administración pública deben ser públicos&lt;/strong&gt;. No valen excusas para no publicar las listas de esperas de sanidad, ni saber cuántos contratos se hacen al mes, ni cuánto se cobran de dietas,&amp;#8230; Como informáticos, conocemos que toda esta información se está introduciendo al día en el sistema, casi en tiempo real. El gran problema es que un político no cree en los datos, sólo cree en aquello que confirme lo que cree. Como leí hace poco en un libro&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;: &amp;#8220;El propósito último del &lt;em&gt;análisis de datos&lt;/em&gt; es convencer a otras personas que sus creencias pueden ser alteradas por los datos&amp;#8221;. Y creo que es aquí donde los informáticos somos más temidos. Nos niegan ser parte de las juntas de dirección porque nuestros razonamientos se basarían en datos reales gracias a nuestro conocimiento integral de la estructura de la empresa. Somos demasiado poco manipulables para ser&amp;nbsp;directivos.&lt;/p&gt;
&lt;p&gt;Hay que exigir que la administración pública abra sus datos. Son de agradecer los primeros esfuerzos en &lt;em&gt;opendata&lt;/em&gt; que realizan algunos gobiernos autonómicos; pero son datos muy escasos y limitados, casi ridículos en comparación con la cantidad total de datos que gestiona. Debería exigirse, por ley, que toda empresa que trabaje para la administración pública publique sus datos. Ya no sólo porque los ciudadanos queramos saber más, si no porque el dinero público debe beneficiar a todos, incluso a las empresas que no conseguieron el contrato y que quieran&amp;nbsp;mejorar.&lt;/p&gt;
&lt;p&gt;Padezco de cierto Síndrome de Casandra, pero si me preguntaran cómo pienso que será el futuro, imagino en un mundo inhundado de datos abiertos. La huella que dejaron generaciones pasadas en este océano de datos serían la base con la que investigadores del presente harían nuevos descubrimientos médicos y científicos. Datos que contradigan la manipulación del presente por políticos y multinacionales. En definitiva, un quinto poder para una Democracia más&amp;nbsp;justa.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Doing Bayesian Data Analysis&amp;#8221; por John K. Kruschke&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Notas"></category></entry><entry><title>Scala vs. Python vs. Lua</title><link href="https://chemacortes.github.io/blog/2013/04/09/scala-vs-python-vs-lua/" rel="alternate"></link><published>2013-04-09T20:55:00+02:00</published><updated>2013-04-09T20:55:00+02:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2013-04-09:/blog/2013/04/09/scala-vs-python-vs-lua/</id><summary type="html">&lt;p&gt;Hace bastante tiempo que ando comentando cosas de estos tres lenguajes: Scala, Python y Lua. Hasta el momento no he hecho una comparativa entre ellos y creo que es el momento de hacerlo, siempre desde el punto de vista de un programador. Más que llegar a la conclusión de cuál …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace bastante tiempo que ando comentando cosas de estos tres lenguajes: Scala, Python y Lua. Hasta el momento no he hecho una comparativa entre ellos y creo que es el momento de hacerlo, siempre desde el punto de vista de un programador. Más que llegar a la conclusión de cuál es mejor o peor, quisiera dar una idea de porqué los recomiendo, a los tres, sin decantarme por sólo uno de ellos. Si buscabas razones para quedarte con uno de ellos, tampoco deberías desestimar otros similares como Ruby, Groovy, Haskel, Clojure o Erlang. De todos hay cosas qué&amp;nbsp;aprender.&lt;/p&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;Quizás Python sea el lenguaje más asequible para un programador que empieza o que busca un segundo lenguaje. Su aprendizaje es sencillo, mientras que su potencia y ubicuidad lo hace ideal desde los pequeños scripts que podamos necesitar en nuestro día a día, hasta escalar a servidores empresariales de tipo&amp;nbsp;medio.&lt;/p&gt;
&lt;p&gt;Puede que a muchos disguste python por su identación forzada o por su particular modelo de datos, por citar dos de las características más criticadas. Sin embargo, confía en mí si te digo que python es uno de los mayores compendios de sabiduría que puedes tener al alcance de tus manos. Cualquier cosa que creas extraña o fuera de lugar, seguramente tenga su buena explicación. El sistema colaborativo que hace evolucionar a python (conocido como &lt;span class="caps"&gt;PEP&lt;/span&gt;-&lt;em&gt;Python Enhancement Proposals&lt;/em&gt;) consigue que todo el saber de la comunidad python termine decantándose hace un modelo de evolución del lenguaje que lo hace único, con el que mejora calmadamente con cada versión. Operaciones con números grandes, algoritmo &lt;span class="caps"&gt;MRO&lt;/span&gt; para herencia múltiple, estructuras de datos optimizadas (heapq, deque,&amp;#8230;), ordenaciones por clave, operaciones sobre secuencias (sum, any, all,&amp;#8230;)&amp;#8230; son sólo algunos ejemplos de optimizaciones que el usuario usa sin ser realmente consciente de la cantidad de trabajo que le está ahorrando. En python casi siempre hay una forma de hacer las cosas correctamente, y además suele ser la&amp;nbsp;mejor.&lt;/p&gt;
&lt;h2&gt;Lua&lt;/h2&gt;
&lt;p&gt;Desde mi punto de vista, considero Lua como un &lt;em&gt;python minimalista&lt;/em&gt;. Sin objetos, sin posibilidad de construir tus propios tipos de datos, pero se apaña con un sólo tipo de estrutura &lt;code&gt;table&lt;/code&gt; para montar un sistema de herencia y emular algunos tipos de datos. Si lenguajes como python te parece complicados, no comprendes conceptos como la herencia, la creación de tipos o para qué sirven las metaclases, la simplicidad de lua hará que entiendas mejor estos&amp;nbsp;conceptos.&lt;/p&gt;
&lt;p&gt;El reducido tamaño del intérprete de Lua lo hace apropiado para ser empotrado en otras aplicaciones. Lo tenemos en gestores de paquetes (&lt;span class="caps"&gt;RPM&lt;/span&gt;), bases de datos (mysql-lua), e IDEs (Scite), aunque quizás sea más famoso por ser el motor de script de juegos como &lt;em&gt;World of Warcraft&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En cuanto a sintáxis, también goza de un minimalismo que, a veces, desearías tuviera python. Posee cierta relajación en la llamada a funciones que permite usarlo para crear DSLs (&lt;em&gt;Lenguajes Específicos del Dominio&lt;/em&gt;), aunque quizás su mejor uso sea como lenguaje de descripción de datos en sustitución de xml, yaml o ficheros&amp;nbsp;ini.&lt;/p&gt;
&lt;h2&gt;Scala&lt;/h2&gt;
&lt;p&gt;Reconozco que soy un ferviente partidario de la &lt;em&gt;Programación Funcional&lt;/em&gt;. Python tiene algún aspecto de este paradigma, pero cada vez parece más diluido dentro del sistema de Clases Abstractas (&lt;code&gt;ABC&lt;/code&gt;-Abstract Base Classes) que empiezan a generalizarse en python. La estrategia de python es optimizar el uso de estas clases abstractas, independientemente de las clases que deriven luego de ellas. Aunque es un buen enfoque de optimización, siempre estará limitado a tiempo de&amp;nbsp;ejecución.&lt;/p&gt;
&lt;p&gt;Scala posee un potente sistema de tipado estático de datos que posibilita la inferencia del tipo de una operación, lo que permite cierta relajación en el tipado que lo hace muy similar al tipado dinámico. Pero la posibilidad de crear nuevos tipos, ya no sólo de objetos, si no también a partir de funciones o de &lt;em&gt;patrones de código&lt;/em&gt;, consigue interfaces más robustos y que sea el compilador quien optimize el código, antes de su&amp;nbsp;ejecución.&lt;/p&gt;
&lt;p&gt;Así que tenemos que scala es funcional, con un potente sistema de tipos y, además, 100% compatible con Java. ¿Se puede pedir algo&amp;nbsp;más?&lt;/p&gt;
&lt;p&gt;Pues sí. Incorpora el llamado modelo &lt;em&gt;Actor&lt;/em&gt; para programación concurrente. Con los actores, en lugar de compartir un espacio común de memoria entre los distintos procesos concurrentes, se establece un sistema de mensajes que son enviados y recibidos. Este modelo se ha mostrado bastante eficaz en sistemas de alta demanda como son algunas webs como twitter o&amp;nbsp;linkedin.&lt;/p&gt;
&lt;p&gt;En cuanto a la sintáxis, scala también posee algunas normas relajadas para la creación de DSLs muy similar a lo que se ve en Groovy. Algunos lenguajes &lt;span class="caps"&gt;DSL&lt;/span&gt; se usan en &lt;em&gt;frameworks&lt;/em&gt; de creación webs, como Play2, o para crear conjuntos de pruebas&amp;nbsp;(ScalaUnit).&lt;/p&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Espero que te haya convencido para que eches un vistazo a algunos de estos lenguajes, aunque los tres sean altamente recomendables. Si tuviera que resumir en pocas líneas lo dicho hasta ahora, sería&amp;nbsp;así:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python: navaja suiza de los lenguajes. Sirve para todo y está presente en cualquier sitio. Es un compendio de sabiduría para hacer las cosas de la mejor forma, aún sin&amp;nbsp;proponértelo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lua: lenguaje minimalista. Ayuda a comprender mejor algunos conceptos de programación. Es el lenguaje que me gustaría que tuviera todo navegador en lugar de&amp;nbsp;javascript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scala: funcional y con potente sistema de tipos. Su implementación del modelo actor lo hace idóneo para la creación de sistemas de alta demanda de&amp;nbsp;accesos.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Notas"></category><category term="python"></category><category term="scala"></category><category term="lua"></category><category term="programming-languages"></category></entry><entry><title>De Generaciones Perdidas</title><link href="https://chemacortes.github.io/blog/2013/03/31/de-generaciones-perdidas/" rel="alternate"></link><published>2013-03-31T15:15:00+02:00</published><updated>2013-03-31T15:15:00+02:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2013-03-31:/blog/2013/03/31/de-generaciones-perdidas/</id><summary type="html">&lt;p&gt;Allá por los 80, en Zaragoza, cuando internet era tan sólo la &lt;code&gt;i&lt;/code&gt; del
protocolo &lt;span class="caps"&gt;TCP&lt;/span&gt;/&lt;span class="caps"&gt;IP&lt;/span&gt; y los meros mortales se apañaban con sus modems para
acceder a alguna &lt;span class="caps"&gt;BBS&lt;/span&gt; local, y donde la única autopista de la información
consistía en una cinta semanal de 200 &lt;span class="caps"&gt;MB&lt;/span&gt;. que llegaba …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Allá por los 80, en Zaragoza, cuando internet era tan sólo la &lt;code&gt;i&lt;/code&gt; del
protocolo &lt;span class="caps"&gt;TCP&lt;/span&gt;/&lt;span class="caps"&gt;IP&lt;/span&gt; y los meros mortales se apañaban con sus modems para
acceder a alguna &lt;span class="caps"&gt;BBS&lt;/span&gt; local, y donde la única autopista de la información
consistía en una cinta semanal de 200 &lt;span class="caps"&gt;MB&lt;/span&gt;. que llegaba desde el &lt;span class="caps"&gt;CERN&lt;/span&gt; de
Ginebra, existía un grupo de &lt;em&gt;hackers&lt;/em&gt;, en el buen sentido de la
palabra&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, que abarrotaban las pocas salas de informática que tenía
la Universidad de Zaragoza. No existían enseñanza de informática y los
conocimientos erán compartidos entre todos sin&amp;nbsp;reservas.&lt;/p&gt;
&lt;p&gt;Fue una época convulsa, presagio de los cambios que iban a venir y que
lo cambiarían todo. Luchas por el espacio cybernético, espionaje y
contraespionaje, virus y antivirus,&amp;#8230;un mundo cruel que quedó atrás y
que originó una &amp;#8220;generación perdida&amp;#8221;, una de tantas, pero de un nivel
tecnológico sin paragón que hizo puntera a Zaragoza y de la que muy
pocos tienen siquiera una mínima noción de su&amp;nbsp;existencia.&lt;/p&gt;
&lt;p&gt;A veces me he preguntado si valdría la pena dar a conocer a esta
generación y todo lo que hicieron. Pero sus integrantes, una vez
rehechas sus vidas ajenas a la universidad, incluso dejando sus estudios
en la cuneta, callan y no parece que deseen que se hable del tema. No
esperes que yo lo haga aquí, pero si quieres una pequeña muestra de lo
que pasó existe una serie de historias contadas en el libro &lt;em&gt;&amp;#8220;Sueños
Electrónicos. Emprendedores en la Red&amp;#8221;&lt;/em&gt; de José Carlos Arnal (&lt;a href="http://www.casadellibro.com/libro-suenos-electronicos-emprendedores-en-la-red/9788483241172/817995"&gt;&lt;span class="caps"&gt;ISBN&lt;/span&gt;:9788483241172&lt;/a&gt;) que puede darte una buena idea, aunque incompleta.
Como se suele decir, &lt;em&gt;&amp;#8220;existen dos tipos de hackers: los buenos y los
famosos&amp;#8221;&lt;/em&gt;. Si a álguien le interesa el tema, que lea este libro, porque
de los buenos hackers nunca se&amp;nbsp;hablará.&lt;/p&gt;
&lt;p&gt;En este país nunca aprenderemos. Ya sea por guerras, conflictos
políticos o por la avarienta corrupción, seguimos quemando generaciones
en la gran pira de calamidades inevitables en la que se ha convertido la
historia de España. Sirva este artículo como callado homenaje a esta
&lt;em&gt;De-Generación Perdida&lt;/em&gt; junto con el que &lt;a href="http://qlio.blogspot.com.es/2012/01/jakers-finales-de-los-80s-en-zaragoza.html"&gt;escribió Gaudi en su bitácora&lt;/a&gt; hace ya un&amp;nbsp;año.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Extraer conocimientos a través de la tecnología.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Notas"></category></entry><entry><title>Estado de situación</title><link href="https://chemacortes.github.io/blog/2013/02/19/estado-de-situacion/" rel="alternate"></link><published>2013-02-19T21:39:00+01:00</published><updated>2013-02-19T21:39:00+01:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2013-02-19:/blog/2013/02/19/estado-de-situacion/</id><summary type="html">&lt;p&gt;Hacía mucho que no actualizaba mi blog y creo que ya es momento de contar algunas cosillas. Me gustaría no tener que hablar de la crisis por la que estamos pasando, al menos en España, pero resulta imposible abstraerse de su&amp;nbsp;influencia.&lt;/p&gt;
&lt;p&gt;En mi trabajo como informático en una administración …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hacía mucho que no actualizaba mi blog y creo que ya es momento de contar algunas cosillas. Me gustaría no tener que hablar de la crisis por la que estamos pasando, al menos en España, pero resulta imposible abstraerse de su&amp;nbsp;influencia.&lt;/p&gt;
&lt;p&gt;En mi trabajo como informático en una administración pública, soy testigo de cómo se están aplicando medidas de austeridad sin contramedidas que eviten el colapso del sistema. Sin duda alguna, el objetivo de estas medidas no puede ser otro que liquidar el sistema público para su sustitución por otro basado en el libre mercado, menos solidario y más&amp;nbsp;injusto.&lt;/p&gt;
&lt;p&gt;Pero no quiero hablar de la crisis en general. Hay otros muchos blogs que lo hacen mucho mejor que yo y con mayor profundidad. Solo quisiera hablar ahora de los cambios que estoy viviendo en mi entorno de&amp;nbsp;trabajo.&lt;/p&gt;
&lt;p&gt;Por un lado, todos aquellos proyectos innovadores en los que estaba implicado han sido cancelados o aminorados por los nuevos gestores. Como primera consecuencia de ello, han quedado sin uso todos mis programas hechos en python con los que extraía la información que necesitaba la dirección para la toma de decisiones (&lt;abbr title="&amp;quot;Management Information System&amp;quot; - &amp;quot;Sistema de información gerencial (SIG)&amp;quot;"&gt;&lt;span class="caps"&gt;MIS&lt;/span&gt;&lt;/abbr&gt;). Confío que algún día vuelva a interesar el &lt;em&gt;estado real&lt;/em&gt; de la administración donde trabajo, aunque sospecho que para entonces será demasiado&amp;nbsp;tarde.&lt;/p&gt;
&lt;p&gt;Se puede afirmar que ahora mismo ya no programo en python. Por si fuera poco, a ésto hay que añadir la cantidad de proyectos que se nos están quedando huérfanos por no poder renovar su mantenimiento o, simplemente, por quebrar y desaparecer las empresas que los llevaban. Todos estos proyectos están cayendo en mi bandeja de tareas pendientes, con lo que ahora he tenido que volver a programar en lenguajes que creía olvidados como Visual Basic, &lt;span class="caps"&gt;TSQL&lt;/span&gt; o &lt;span class="caps"&gt;PHP&lt;/span&gt;. Un gran paso atrás del que no veo que podamos salir en bastantes&amp;nbsp;años.&lt;/p&gt;
&lt;p&gt;Por este motivo, cuando un grupo de entusiastas programadores españoles de python unieron esfuerzos para crear una &lt;a href="http://www.es.pycon.org/" title="PyCon España"&gt;asociación&lt;/a&gt; con la que montar la primera &lt;a href="http://www.es.pycon.org/" title="PyCon España"&gt;&lt;strong&gt;PyCon&lt;/strong&gt; española&lt;/a&gt;, no he podido dejar de pensar lo lejos que estoy en estos momentos de considerarme &lt;em&gt;&amp;#8220;programador python&amp;#8221;&lt;/em&gt;. Se me incluyó en un principio entre los &lt;em&gt;&amp;#8220;socios fundadores&amp;#8221;&lt;/em&gt; de la asociación, supongo que debido a mi labor en la lista de &lt;a href="http://mail.python.org/mailman/listinfo/python-es"&gt;python-es&lt;/a&gt; todos estos años. Pero pienso que un socio fundador debe ser una especie de socio &lt;em&gt;&amp;#8220;compromisario&amp;#8221;&lt;/em&gt; que trabaje duro para hacer viable la asociación, sobre todo en sus inicios más difíciles. En estos momentos, no me veo capaz de algo así, ni siquiera de mostrar el más mínimo entusiasmo. Por éso mismo, he preferido declinar el ofrecimiento y figurar como un socio más, a pesar de haber podido disgustar a más de&amp;nbsp;uno.&lt;/p&gt;
&lt;p&gt;Como puntilla a lo dicho, últimamente estoy dedicando todo mi tiempo disponible al estudio del lenguaje &lt;a href="http://www.scala-lang.org/"&gt;scala&lt;/a&gt;. Además de reconciliarme con la programación funcional, me ha hecho férreo defensor del tipado estático frente al tipado dinámico que usa python. No quiero decir de ninguna manera que abandone python, pero preveo que este año lo dedicaré a convertirme en experto programador de scala. Definitivamente, no encajo preparando la PyCon. Mis disculpas por&amp;nbsp;ello.&lt;/p&gt;</content><category term="Notas"></category><category term="PyConES"></category></entry><entry><title>Lingua Franca</title><link href="https://chemacortes.github.io/blog/2012/05/12/lingua-franca/" rel="alternate"></link><published>2012-05-12T17:11:00+02:00</published><updated>2012-05-12T17:11:00+02:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2012-05-12:/blog/2012/05/12/lingua-franca/</id><summary type="html">&lt;p&gt;Este mes de mayo, el conocido y muchas veces criticado &lt;a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" title="TIOBE Programming Community Index"&gt;índice tiobe&lt;/a&gt; comenta que, tras 8 años, las posiciones en este índice de los lenguajes de programación no han sufrido demasiado altibajos, con excepciones notables como el &lt;em&gt;&amp;#8220;Objective C&amp;#8221;&lt;/em&gt; empleado por el &lt;em&gt;ecosistema Apple&lt;/em&gt; (&lt;em&gt;iPhone/iPad/MacOS&lt;/em&gt;).  Achaca esta inmovilidad …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este mes de mayo, el conocido y muchas veces criticado &lt;a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" title="TIOBE Programming Community Index"&gt;índice tiobe&lt;/a&gt; comenta que, tras 8 años, las posiciones en este índice de los lenguajes de programación no han sufrido demasiado altibajos, con excepciones notables como el &lt;em&gt;&amp;#8220;Objective C&amp;#8221;&lt;/em&gt; empleado por el &lt;em&gt;ecosistema Apple&lt;/em&gt; (&lt;em&gt;iPhone/iPad/MacOS&lt;/em&gt;).  Achaca esta inmovilidad a lo costoso de trasladar todo el código base que hemos acumulado de un lenguaje a otro, optando por mantenerse fiel a lenguaje que está&amp;nbsp;utilizando.&lt;/p&gt;
&lt;p&gt;Desde mi punto de vista, ésta no es una razón de peso hoy en día. Los distintos lenguajes de programación pueden compartir librerías sin demasiados problemas. Tecnologías como &lt;code&gt;.Net&lt;/code&gt; o &lt;code&gt;JVM&lt;/code&gt; facilitan bastante esta tarea, de modo que la mezcla de lenguajes es posible, sin obligar a elegir un único lenguaje al inicio de un&amp;nbsp;desarrollo.&lt;/p&gt;
&lt;p&gt;Pienso, por ejemplo, en todos los lenguajes de programación existentes para &lt;span class="caps"&gt;JVM&lt;/span&gt; (groovy, scala, clojure, jython, jruby,&amp;#8230;). Todos ellos pueden usar las mismas librerías que usa java, aportando a su vez opciones con las que no cuenta java. Tal vez en esa proliferación de lenguajes alternativos se encuentre la explicación de porqué java ha perdido posiciones con respecto a C++. La evolución de Java se ha quedado algo estancada, tardando demasiado en incorporar características tan demandadas como las &lt;em&gt;&amp;#8220;clausuras&amp;#8221;&lt;/em&gt; o &lt;em&gt;tipos dinámicos&lt;/em&gt; que ofrecen los otros lenguajes.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Porque es la evolución de los lenguajes de programación lo que realmente es interesante. No hace muchos años, creo que en la revista DrDobb&amp;#8217;s, existía una sección fija dedicada al &lt;em&gt;&amp;#8220;lenguaje exótico del mes&amp;#8221;&lt;/em&gt; que pretendía mostrar lenguajes más expresivos, muchos de dominio específico orientados a resolver problemas concretos, pero donde a veces se veían pequeñas joyas como el &lt;span class="caps"&gt;APL&lt;/span&gt;. Los lenguajes de uso habitual se consideraban limitados, y muchas veces la evolución en los algoritmos fallaba en el preciso momento de tener que codificarlo en un programa de ordenador. El lenguaje máquina dejó paso a otros modo de entenderse con la&amp;nbsp;máquina.&lt;/p&gt;
&lt;p&gt;Con el tiempo, cuando la programación se convirtió en ciencia, aparecieron los &lt;strong&gt;&amp;#8220;paradigmas&amp;#8221;&lt;/strong&gt; y las &lt;strong&gt;&amp;#8220;metodologías&amp;#8221;&lt;/strong&gt;. La programación se volvió bastante más abstracta y la ingeniería impuso sus reglas de eficiencia que terminó por relegar los lenguajes de programación a un segundo plano. La &lt;em&gt;&amp;#8220;expresividad&amp;#8221;&lt;/em&gt; se conseguía ahora mediante herramientas &lt;span class="caps"&gt;CASE&lt;/span&gt; e IDEs inteligentes que imponían sus lenguajes de&amp;nbsp;programación.&lt;/p&gt;
&lt;p&gt;Estamos en una época que poco va a cambiar en cuanto a lenguajes, tal como afirma &lt;a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" title="TIOBE Programming Community Index"&gt;Tiobe&lt;/a&gt;. La razón de peso son las herramientas que usamos, que no las librerías. Los lenguajes más populares (los que aparecen en el índice tiobe) poseen un proceso evolutivo por el que adaptan los aciertos de los otros y se desprenden de lo obsoleto. No aumenta el número de lenguajes, pero las versiones de los lenguajes aumentan sin parar. Una estrategia evolutiva en el más amplio sentido que hace que los lenguajes se parezcan cada vez más entre sí, con formas muy similares para resolver los mismo problemas que llamamos &amp;#8220;patrones de diseño&amp;#8221; y concepciones&amp;nbsp;similares.&lt;/p&gt;
&lt;p&gt;¿El inicio de una &lt;em&gt;&amp;#8220;Lingua Franca&amp;#8221;&lt;/em&gt;?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;En la literatura, se suele mencionar al lenguaje Scala como &amp;#8220;lo que debería haber sido la evolución de Java&amp;#8221;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Notas"></category><category term="CompSci"></category><category term="computing science"></category></entry><entry><title>Rentrée (nueva temporada)</title><link href="https://chemacortes.github.io/blog/2011/10/08/rentree-nueva-temporada/" rel="alternate"></link><published>2011-10-08T18:22:00+02:00</published><updated>2022-09-04T10:37:28+02:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2011-10-08:/blog/2011/10/08/rentree-nueva-temporada/</id><summary type="html">&lt;p&gt;Desconectado de mis tareas habituales depués de algunas semanas viajando por Francia, veo que me quedaron varios proyectos y artículos en dique seco que pretendo recuperar. Con la &lt;em&gt;&amp;#8220;reentrada&amp;#8221;&lt;/em&gt; (o, como dirían los franceses, &lt;em&gt;&amp;#8220;rentrée&amp;#8221;&lt;/em&gt;) me he propuesto algunas metas para esta nueva &lt;em&gt;temporada&lt;/em&gt; (por llamarla de algún modo) que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Desconectado de mis tareas habituales depués de algunas semanas viajando por Francia, veo que me quedaron varios proyectos y artículos en dique seco que pretendo recuperar. Con la &lt;em&gt;&amp;#8220;reentrada&amp;#8221;&lt;/em&gt; (o, como dirían los franceses, &lt;em&gt;&amp;#8220;rentrée&amp;#8221;&lt;/em&gt;) me he propuesto algunas metas para esta nueva &lt;em&gt;temporada&lt;/em&gt; (por llamarla de algún modo) que ahora&amp;nbsp;empiezo.&lt;/p&gt;
&lt;p&gt;Junto a los artículos que tengo previstos, intentaré incorporar al blog más comentarios sobre temas técnicos que me vayan surgiendo en el día a día, preferiblemente relacionados con la programación. Sin llegar a la extensión de un artículo, espero que sirvan como gérmen de desarrollos posteriores más&amp;nbsp;extensos.&lt;/p&gt;
&lt;p&gt;Como primeras ideas para esta &lt;em&gt;rentrée&lt;/em&gt;, he tomados dos decisiones: centrar mis desarrollos en la &lt;a href="http://es.wikipedia.org/wiki/Máquina_virtual_Java"&gt;máquina virtual java&lt;/a&gt; (plataforma &lt;abbr title="Java Virtual Machine"&gt;&lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/abbr&gt;) y aprender a programar con &lt;a href="http://www.scala-lang.org/" title="Lenguaje Scala"&gt;scala&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Máquina Virtual Java (&lt;abbr title="Java Virtual Machine"&gt;&lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/abbr&gt;)&lt;/h2&gt;
&lt;p&gt;Hoy en día, la &lt;abbr title="Java Virtual Machine"&gt;&lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/abbr&gt; está omnipresente para casi cualquier dispositivo y sistema operativo. Su uso empresarial es muy extendido, tanto para desarrollo en el lado servidor como para clientes móviles. Librerías y paquetes suficientemente robustos y probados completan una gran plataforma donde desarrollar cualquier tipo de aplicativo que podamos&amp;nbsp;pensar.&lt;/p&gt;
&lt;p&gt;Al evaluar la robustez de las librerías java, hay que tener en cuenta que java y su &lt;abbr title="Java Virtual Machine"&gt;&lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/abbr&gt; están en constante evolución. El paso de Java5 a Java6 sido muy lento debido a las pocas ventajas que ofrecía el cambio frente al coste de tener que adaptar el código; pero con Java7 se incorpora a la máquina virtual el poder trabajar con tipos dinámicos de datos, lo que mejorará bastante el rendimiento de los lenguajes de scripting como jython, jruby ó groovy, por poner algunos ejemplos. Este cambio parece independizar el desarrollo de la &lt;abbr title="Java Virtual Machine"&gt;&lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/abbr&gt; del lenguaje java para pasar a ser una plataforma común para la ejecución de aplicaciones, sea cual sea el lenguaje que se haya usado (objetivo similar a lo que tenía que haber sido&amp;nbsp;.Net).&lt;/p&gt;
&lt;p&gt;En lo personal, desde hace mucho tiempo que estoy programando en jython, tal como comenté en otro &lt;a href="https://chemacortes.github.io/blog/2011/05/30/porque-uso-jython/"&gt;artículo&lt;/a&gt;. La llegada de los dispositivos android hace aún más interesante la programación para &lt;abbr title="Java Virtual Machine"&gt;&lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/abbr&gt;, así como que las numerosas herramientas de software libre que estoy usando estén para esta plataforma. No quiero decir con ésto que renuncie a utilizar la CPython, la máquina virtual &lt;em&gt;&amp;#8220;nativa&amp;#8221;&lt;/em&gt; que lleva python, siempre que sea necesario. Tan sólo priorizo la plataforma, &lt;abbr title="Java Virtual Machine"&gt;&lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/abbr&gt;, frente a las últimas implementaciones del lenguaje python. Espero que el proyecto &lt;a href="http://pypy.org/"&gt;PyPy&lt;/a&gt; facilite un único camino para el desarrollo del lenguaje, independiente de la máquina virtual&amp;nbsp;empleada.&lt;/p&gt;
&lt;h2&gt;Lenguaje&amp;nbsp;Scala&lt;/h2&gt;
&lt;p&gt;Poco conozco de este lenguaje, la verdad. En el índice &lt;a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" title="Índice Tiobe"&gt;tiobe&lt;/a&gt; de septiembre de 2011 figura en la posición 50, la última posición que entra en valoración. Pero los comentarios que he leído sobre este lenguaje me han picado tanto la curiosidad que he decidido darle un vistazo. Si quieres un consejo: no te limites a un sólo lenguaje de programación. Sólo comparando con otros lenguajes descubrirás las virtudes y limitaciones de los lenguajes que uses. Sobre todo, intenta aprender algún lenguaje &lt;em&gt;&amp;#8220;exótico&amp;#8221;&lt;/em&gt;, si por exótico se entiende aquél que no se ve en los estudios oficiales de informática. Siempre que te pidan mostrar tus conocimientos de programador, saber programar en un lenguaje &amp;#8220;exótico&amp;#8221; será visto como que te entusiasma la programación y que tienes capacidad para aprender cosas nuevas por tu cuenta (Python sigue siendo un excelente ejemplo de lenguaje para estas&amp;nbsp;demostraciones).&lt;/p&gt;
&lt;p&gt;Algunas características interesantes de&amp;nbsp;Scala:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lenguaje funcional orientado a objeto similar a java, pero superando a éste en simplicidad. Incorpora clausuras y tipado perezoso de&amp;nbsp;datos.&lt;/li&gt;
&lt;li&gt;Escalable (como indica su nombre: &lt;strong&gt;sca&lt;/strong&gt;lable &lt;strong&gt;la&lt;/strong&gt;nguage)&lt;/li&gt;
&lt;li&gt;Emplea la &lt;abbr title="Java Virtual Machine"&gt;&lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/abbr&gt;, aunque también hay versión para .Net. Puede usarse en cualquier sitio que se use java como, por ejemplo, para programación en&amp;nbsp;android.&lt;/li&gt;
&lt;li&gt;Preparado para la programación concurrente. Sigue el modelo &amp;#8220;Actor&amp;#8221;, o lo que es lo mismo, todos los objetos son &amp;#8220;actores&amp;#8221; con su propio entorno de&amp;nbsp;ejecución.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Asociacionismo en torno a&amp;nbsp;python&lt;/h2&gt;
&lt;p&gt;Tangencialmente, he empezado a meterme en la organización de un evento relacionado con python. Creo importante que todos retomemos los contactos personales e intentar hacer reflotar las ilusiones perdidas por esta crisis que estamos viviendo. Si todo va bien, espero vernos en el &lt;a href="http://python-hispano.org/DiaPythonZGZ"&gt;Día Python 2011&lt;/a&gt; en Zaragoza dentro de la &lt;span class="caps"&gt;LSWC&lt;/span&gt;&amp;#8216;11.&lt;/p&gt;</content><category term="Notas"></category><category term="python"></category><category term="java"></category><category term="jvm"></category><category term="pyday"></category><category term="scala"></category></entry><entry><title>30 años no es nada o cómo soy como soy</title><link href="https://chemacortes.github.io/blog/2011/03/14/30-no-es-nada/" rel="alternate"></link><published>2011-03-14T21:47:00+01:00</published><updated>2011-03-14T21:47:00+01:00</updated><author><name>Chema Cortés</name></author><id>tag:chemacortes.github.io,2011-03-14:/blog/2011/03/14/30-no-es-nada/</id><summary type="html">&lt;p&gt;Estreno este blog con una pequeña reflexión: hace aproximadamente 30
años que escribí mi &lt;em&gt;primer programa&lt;/em&gt;. Y cuando digo escribir me refiero
al antiguo sistema de usar un bolígrafo y un papel, un simple ejercicio
en &lt;span class="caps"&gt;GWBASIC&lt;/span&gt; que nunca vi&amp;nbsp;ejecutarse.&lt;/p&gt;
&lt;p&gt;Fue en esa época cuando decidí que quería estudiar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Estreno este blog con una pequeña reflexión: hace aproximadamente 30
años que escribí mi &lt;em&gt;primer programa&lt;/em&gt;. Y cuando digo escribir me refiero
al antiguo sistema de usar un bolígrafo y un papel, un simple ejercicio
en &lt;span class="caps"&gt;GWBASIC&lt;/span&gt; que nunca vi&amp;nbsp;ejecutarse.&lt;/p&gt;
&lt;p&gt;Fue en esa época cuando decidí que quería estudiar &lt;strong&gt;Ciencias Físicas&lt;/strong&gt;.
Con los años, me decepcionó el sistema universitario y las nulas
posibilidades para trabajar en investigación que ofrecía, tal como me
hubiera gustado. A cambio, terminé arrollado por completo por una
incipiente revolución que hoy es conocida por &lt;strong&gt;internet&lt;/strong&gt;: programación
en fortran, los primeros macintosh con sus interfaces gráficos, el
correo electrónico y las news, las primeras redes de conmutación de
paquetes, los primeros protocolos de transmisión de ficheros, el
&lt;span class="caps"&gt;CERN&lt;/span&gt;,&amp;#8230; Estos años he ido cambiado de lenguaje de programación, de
sistema operativo y, sobre todo, de equipo informático; en estos
momentos mis predilecciones van por hacer las cosas lo más simples
posible (&lt;a href="http://en.wikipedia.org/wiki/KISS_principle" title="KISS Principle"&gt;&lt;span class="caps"&gt;KISS&lt;/span&gt; principle&lt;/a&gt;),
donde el lenguaje python ha supuesto tanto la herramienta ideal para
conseguirlo, como una fuente de inspiración gracias a la gente que lo ha
hecho&amp;nbsp;posible.&lt;/p&gt;
&lt;p&gt;También fue en esa época cuando tuve una ruptura temporal con la
literatura de &lt;strong&gt;ciencia ficción&lt;/strong&gt; que tanto marcó mi juventud. Mis
estudios, así como la gran avalancha de textos que me llegaban sobre
computación y programación, me ocupaban todo el tiempo disponible. Ha
sido hace tan sólo unos años que he vuelto a recuperar el gusto por la
ciencia ficción, devorando muchos textos de autores contemporáneos del
género, principalmente norteamericanos, bastante más accesibles que
algunos españoles. No puede ser más desalentador ver, que en plena era
de las redes sociales y los libros electrónicos, los autores españoles
sigan estando más interesados en publicar sus libros en papel que en
conseguir más gente que &lt;em&gt;efectivamente&lt;/em&gt; lean sus libros y los&amp;nbsp;comente.&lt;/p&gt;
&lt;p&gt;En fin, estos serán, a grandes rasgos, los temas con los que voy a
rellenar mi blog. Tengo muchas cosas pendientes de escribir y nada claro
en qué orden irán saliendo. De momento te pediría paciencia hasta que se
vean más contenidos por aquí. Espero tus&amp;nbsp;comentarios.&lt;/p&gt;</content><category term="Notas"></category></entry></feed>