<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hyperreals *R - Coconut</title><link href="https://chemacortes.github.io/" rel="alternate"></link><link href="https://chemacortes.github.io/feeds/coconut.atom.xml" rel="self"></link><id>https://chemacortes.github.io/</id><updated>2019-05-07T19:47:56+02:00</updated><subtitle>Quarks, bits y otras criaturas infinitesimales</subtitle><entry><title>Monadas con¬†coco</title><link href="https://chemacortes.github.io/2019/05/07/monadas-con-coco/" rel="alternate"></link><published>2019-05-07T19:33:19+02:00</published><updated>2019-05-07T19:47:56+02:00</updated><author><name>Chema Cort√©s</name></author><id>tag:chemacortes.github.io,2019-05-07:/2019/05/07/monadas-con-coco/</id><summary type="html">&lt;p&gt;Los iterables han dejado la programaci√≥n funcional para ser parte de los lenguajes de programaci√≥n modernos. Veremos cu√°les son las implementaciones en python y coconut, y las diferencias entre&amp;nbsp;ellos.&lt;/p&gt;</summary><content type="html">&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;ü••=üêç+üêí&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Iterables&lt;/h2&gt;
&lt;p&gt;Si duda los &lt;strong&gt;Iterables&lt;/strong&gt; es la caracter√≠stica de programaci√≥n funcional que m√°s se usa en python. Se emplean en las &lt;em&gt;compresiones de listas&lt;/em&gt; y las &lt;em&gt;expresiones generadoras&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Pero veamos algunas&amp;nbsp;definiciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Iterable&lt;/strong&gt;: objeto del que se puede recorrer sus elementos en orden, uno a uno. Como ejemplos, est√°n los tipos &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt; y &lt;code&gt;dict&lt;/code&gt;. Lo com√∫n es recorrer sus elementos con un bucle &lt;code&gt;for&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterador&lt;/strong&gt;: objeto que representa un flujo de datos. Con cada uso, o bien entrega un dato, o bien produce una excepci√≥n por quedarse vac√≠o. Por dise√±o, un &lt;code&gt;Iterador&lt;/code&gt; deriva de &lt;code&gt;Iterable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secuencia&lt;/strong&gt;: &lt;em&gt;iterable&lt;/em&gt; con acceso a la posici√≥n de cualquiera de sus elementos y con un tama√±o conocido. Como ejemplos est√°n los tipos &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt; y &lt;code&gt;tuple&lt;/code&gt;. El tipo &lt;code&gt;dict&lt;/code&gt; tambi√©n funciona como secuencia, pero no se considera como tal al no accederse a sus elementos por posici√≥n num√©rica. (Es m√°s considerado como &lt;em&gt;mapping&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generador&lt;/strong&gt;: objeto que crea iteradores. Hay &lt;em&gt;funciones generadoras&lt;/em&gt;, que crean un iterador cada vez que se llaman, y &lt;em&gt;expresiones generadoras&lt;/em&gt;, que crean un s√≥lo&amp;nbsp;iterador.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Iteradores&lt;/em&gt; y &lt;em&gt;secuencias&lt;/em&gt; forman el conjunto de los &lt;em&gt;iterables&lt;/em&gt;, y podemos identificarlos estructuralmente de la siguiente&amp;nbsp;manera:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un &lt;strong&gt;Iterable&lt;/strong&gt; suele tener un m√©todo &lt;code&gt;__iter__&lt;/code&gt; que devuelve un iterador para recorrer en orden todos los&amp;nbsp;elementos.&lt;/li&gt;
&lt;li&gt;Un &lt;strong&gt;Iterador&lt;/strong&gt; tiene un m√©todo &lt;code&gt;__next__&lt;/code&gt; para entregar el siguiente&amp;nbsp;dato.&lt;/li&gt;
&lt;li&gt;Una &lt;strong&gt;Secuencia&lt;/strong&gt; tiene un m√©todo &lt;code&gt;__getitem__&lt;/code&gt;, para acceso a cualquier elemento, y un m√©todo &lt;code&gt;__len__&lt;/code&gt;, para conocer su tama√±o. Adem√°s, pueden tener otros m√©todos como &lt;code&gt;count()&lt;/code&gt;, &lt;code&gt;index()&lt;/code&gt;, &lt;code&gt;__contains__()&lt;/code&gt; y &lt;code&gt;__reversed__()&lt;/code&gt; con los que completar la &lt;em&gt;clase base abstracta&lt;/em&gt; &lt;a href="https://docs.python.org/3.7/library/collections.abc.html#collections.abc.Sequence"&gt;collections.abc.Sequence&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Importante&lt;/p&gt;
&lt;p&gt;Aunque un &lt;em&gt;Iterable&lt;/em&gt; se suele caracterizar por tener un m√©todo &lt;code&gt;__iter__&lt;/code&gt;, tambi√©n las &lt;em&gt;secuencias&lt;/em&gt; se consideran &lt;em&gt;iterables&lt;/em&gt; aunque no tengan este&amp;nbsp;m√©todo.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Caso pr√°ctico: analicemos un objeto &lt;code&gt;range&lt;/code&gt; (eg: &lt;code&gt;dir(range(10))&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tiene el m√©todos &lt;code&gt;__iter__&lt;/code&gt; &amp;#8212;&amp;gt; es un &lt;code&gt;Iterable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tiene los m√©todos &lt;code&gt;__getitem__&lt;/code&gt; y &lt;code&gt;__len__&lt;/code&gt; &amp;#8212;&amp;gt; es una &lt;code&gt;Secuencia&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tiene el resto de m√©todos de &lt;code&gt;collections.abc.Sequence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;no tiene m√©todo &lt;code&gt;__next__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Los objeto &lt;code&gt;Range&lt;/code&gt; son &lt;em&gt;secuencias&lt;/em&gt;, no &lt;em&gt;iteradores&lt;/em&gt;. Como secuencia, algunas de la operaciones que permite&amp;nbsp;son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;troceo: &lt;code&gt;range(100)[4:20] == range(4,20)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;obtener el tama√±o: &lt;code&gt;len(range(100)) == 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;chequeos de pertenencia: &lt;code&gt;200 in range(100) == False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;inversi√≥n: &lt;code&gt;range(100)[::-1] == range(99, -1, -1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Composici√≥n de&amp;nbsp;Iteradores&lt;/h2&gt;
&lt;p&gt;Una ventaja de usar iteradores en lugar de listas es que s√≥lo necesitan memoria para procesar el elemento que est√°n trabajado, por lo que los hace muy eficientes para procesar grandes cantidades de datos o ficheros enormes que no caben enteros en&amp;nbsp;memoria.&lt;/p&gt;
&lt;p&gt;Por ejemplo, esta expresi√≥n&amp;nbsp;generadora:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Como curiosidad, el n√∫mero &lt;code&gt;10**100&lt;/code&gt; se llama &lt;a href="https://es.wikipedia.org/wiki/G√∫gol"&gt;g√∫gol&lt;/a&gt; y es un n√∫mero enormemente grande. Crear esto mismo como una lista es imposible con la memoria de los ordenadores actuales y no habr√≠a tiempo en este Universo para procesar tal cantidad de&amp;nbsp;elementos.&lt;/p&gt;
&lt;p&gt;Y sin embargo, podemos trabajar con esta expresi√≥n sin mayores problemas. Por ejemplo, para obtener los 10 primeros&amp;nbsp;elementos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Incluso podemos usarla como base para crear nuevos&amp;nbsp;iteradores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Equivalente a&amp;nbsp;hacer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Componer iteradores es bastante eficiente. Se van recorriendo a medida que sea necesario, sin mantener en memoria nada m√°s que los elementos estrictamente necesarios para devolver el siguiente&amp;nbsp;elemento.&lt;/p&gt;
&lt;h2&gt;map y&amp;nbsp;filter&lt;/h2&gt;
&lt;p&gt;¬øSabes cu√°l es la diferencia entre estas dos&amp;nbsp;expresiones?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para python, ambas expresiones son equivalentes: iteradores. Pero se considera que tiene m√°s &lt;em&gt;estilo pyth√≥nico&lt;/em&gt; el uso de expresiones generadoras, desaconsej√°ndose completamene el uso de las funciones &lt;code&gt;map&lt;/code&gt; y &lt;code&gt;filter&lt;/code&gt; siempre que se&amp;nbsp;pueda.&lt;/p&gt;
&lt;p&gt;Y sin embargo, para &lt;em&gt;coconut&lt;/em&gt; las funciones &lt;code&gt;map&lt;/code&gt; y &lt;code&gt;filter&lt;/code&gt; son fundamentales como tambi√©n lo son en &lt;em&gt;programaci√≥n funcional&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El iterador que se obtiene con la expresi√≥n generadora &lt;code&gt;(x**2 for x in range(10*100))&lt;/code&gt; act√∫a como si fuera una &lt;em&gt;caja negra&lt;/em&gt;. Se pueden obtener los elemntos uno a uno, pero no ofrece informaci√≥n sobre su estructura interna, ni de su tama√±o, ni nada que permita su&amp;nbsp;transfomaci√≥n.&lt;/p&gt;
&lt;p&gt;En cambio, el &lt;em&gt;iterador map&lt;/em&gt; en coconut (extensi√≥n de la funci√≥n &lt;code&gt;map&lt;/code&gt; de python) almacena informaci√≥n tanto de la funci√≥n como de los iterables a los que se aplica, cosa que hace en los atributos &lt;code&gt;func&lt;/code&gt; y &lt;code&gt;iters&lt;/code&gt;, respectivamente. De este modo, &lt;em&gt;coconut&lt;/em&gt; puede encadenar transformaciones de manera m√°s&amp;nbsp;√≥ptima.&lt;/p&gt;
&lt;p&gt;Por ejemplo, para obtener el √∫ltimo elemento del iterador&amp;nbsp;anterior:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;map(x -&amp;gt; x**2, range(10*100))[-1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Como iterador, deber√≠a haber pasado por todos los &lt;code&gt;10**100&lt;/code&gt; elementos hasta llegar al √∫ltimo, cosa que es imposible de hacer en la pr√°ctica. Sin embargo, si se prueba en &lt;em&gt;coconut&lt;/em&gt;, se obtiene el √∫ltimo elemento casi al instante. En realidad, &lt;em&gt;coconut&lt;/em&gt; cortocircuita todo el proceso y salta directamente al √∫ltimo elemento de &lt;code&gt;range(10**100)&lt;/code&gt;, que es el √∫nico que le hace falta. Es como si hubiera aplicado primero el &lt;code&gt;[-1]&lt;/code&gt; al &lt;code&gt;range(10**100)&lt;/code&gt; y luego hubiera aplicado el &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Este tipo de encapsulado, tanto de un conjunto de datos como de la funci√≥n que lo transforma, se conocen por &lt;strong&gt;aplicativo&lt;/strong&gt; (&lt;em&gt;Applicative&lt;/em&gt; en ingl√©s). Y a las transformaciones que podemos encadenar, una tras otra, para diferir el c√°lculo al final del todo se conoce por &lt;strong&gt;m√≥nadas&lt;/strong&gt; (&lt;em&gt;Monad&lt;/em&gt; en&amp;nbsp;ingl√©s).&lt;/p&gt;
&lt;p&gt;M√°s adelante veremos una definici√≥n matem√°tica formal, pero podemos considerar &lt;strong&gt;monad&lt;/strong&gt; como la &lt;em&gt;herramienta matem√°tica&lt;/em&gt; m√°s poderosa de un programador funcional y, algunas veces, tambi√©n la m√°s&amp;nbsp;incomprensible.&lt;/p&gt;</content><category term="Coconut"></category><category term="coconut"></category><category term="functional-programming"></category><category term="python"></category></entry><entry><title>Coconut - Primeros¬†pasos</title><link href="https://chemacortes.github.io/2019/05/02/coconut-primeros-pasos/" rel="alternate"></link><published>2019-05-02T01:20:16+02:00</published><updated>2019-05-02T23:58:10+02:00</updated><author><name>Chema Cort√©s</name></author><id>tag:chemacortes.github.io,2019-05-02:/2019/05/02/coconut-primeros-pasos/</id><summary type="html">&lt;p&gt;Primera toma de contacto con el lenguaje coconut, su instalaci√≥n y detalles a tener en cuenta con la compatibilidad con las versiones de python&amp;nbsp;utilizadas.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://coconut-lang.org/" title="Coconut language"&gt;Coconut&lt;/a&gt; es un lenguaje funcional completamente &lt;em&gt;pyth√≥nico&lt;/em&gt;. Otro modo de hacer las cosas en python. Al principio puede parecer muy distinto, pero a medida que se conoce te das cuenta de lo √∫til que es a veces abordar ciertos problemas desde un punto de vista &lt;em&gt;puramente funcional&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Qu√© versi√≥n de python&amp;nbsp;utilizar&lt;/h2&gt;
&lt;p&gt;Antes de empezar con &lt;em&gt;coconut&lt;/em&gt;, una advertencia sobre las versiones de python. Para su ejecuci√≥n, el c√≥digo &lt;em&gt;coconut&lt;/em&gt; se traduce en c√≥digo python, pudiendo elegir qu√© versi√≥n de python ejecutar√° el c√≥digo final. Se puede elegir &lt;a href="https://coconut.readthedocs.io/en/master/DOCS.html#allowable-targets"&gt;varias versiones de python&lt;/a&gt; objetivo, independientemente de la versi√≥n de python con la que estemos trabajando. Por defecto, se genera &lt;em&gt;&amp;#8220;c√≥digo universal&amp;#8221;&lt;/em&gt;, v√°lido para todas las versiones de python. Emplear este &lt;em&gt;c√≥digo universal&lt;/em&gt; requiere renunciar a algunas caracter√≠sticas de &lt;em&gt;python 3&lt;/em&gt; que no tienen equivalencia en &lt;em&gt;python 2&lt;/em&gt; como es la notaci√≥n de tipos, el operador &lt;code&gt;'@'&lt;/code&gt; para multiplicaci√≥n de matrices o las sentencias &lt;code&gt;async&lt;/code&gt; y &lt;code&gt;await&lt;/code&gt; para programaci√≥n&amp;nbsp;as√≠ncrona.&lt;/p&gt;
&lt;p&gt;En esta serie de art√≠culos sobre &lt;em&gt;coconut&lt;/em&gt; voy a trabajar siempre con una instalaci√≥n de &lt;em&gt;python 3&lt;/em&gt;, lo recomendado para nuevos proyectos. As√≠ mismo, el c√≥digo generado se ejecutar√° en &lt;em&gt;python 3&lt;/em&gt;. Pero transpilar a &lt;em&gt;c√≥digo universal&lt;/em&gt; deber√≠a ser igualmente v√°lido en la mayor√≠a de casos. Es m√°s, ya que todo c√≥digo &lt;em&gt;python 3&lt;/em&gt; es c√≥digo v√°lido en &lt;em&gt;coconut&lt;/em&gt;, se podr√≠a emplear para convertir c√≥digo de &lt;em&gt;python 3&lt;/em&gt; a &lt;em&gt;python 2&lt;/em&gt;, aunque no lo&amp;nbsp;recomiendo.&lt;/p&gt;
&lt;p&gt;En la documentaci√≥n tienes &lt;a href="https://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions"&gt;informaci√≥n sobre compatibilidad&lt;/a&gt; de &lt;em&gt;coconut&lt;/em&gt; con algunas versiones de&amp;nbsp;python.&lt;/p&gt;
&lt;h2&gt;Instalaci√≥n de&amp;nbsp;coconut&lt;/h2&gt;
&lt;p&gt;Para instalar &lt;em&gt;coconut&lt;/em&gt; mi forma preferida es usar &lt;code&gt;conda&lt;/code&gt; empleando el canal &lt;code&gt;conda-forge&lt;/code&gt;. Siempre es recomendable crear un entorno virtual donde aislar las dependencias del resto de nuestra instalaci√≥n. En concreto, la instalaci√≥n de &lt;em&gt;coconut&lt;/em&gt; incluye varios kernels de jupyter y una configuraci√≥n de pygments para el coloreado de&amp;nbsp;sint√°xis.&lt;/p&gt;
&lt;p&gt;En particular, prefiero crear un fichero de entorno (&lt;code&gt;environment.yml&lt;/code&gt;) que determine las dependencias, tanto las que instala conda, como las que se necesite instalar con pip. Podr√≠amos concretar con precisi√≥n las versiones que vamos a usar; pero me voy a limitar a las dependencias m√≠nimas para la versi√≥n que estoy usando ahora, &lt;em&gt;coconut 1.4.0&lt;/em&gt;.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption&gt;&lt;span class="liquid-tags-code-title"&gt;Entorno virtual &amp;#8216;coco&amp;#8217;&lt;/span&gt;&lt;a href='/code/2019Q2/environment.yml'&gt;download&lt;/a&gt;&lt;/figcaption&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;coco&lt;/span&gt;
&lt;span class="nt"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;defaults&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;conda-forge&lt;/span&gt;
&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python=3.6&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;coconut&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mypy&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pygments&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;jupyter&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;jupyter_console&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;watchdog&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pyparsing=2.2.0&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cpyparsing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/figure&gt;
&lt;p&gt;Se fija la versi√≥n de &lt;code&gt;python=3.6&lt;/code&gt; ya que √©sta es la versi√≥n superior recomendada para &lt;em&gt;coconut&lt;/em&gt;. Posiblemente tambi√©n funcione correctamente con &lt;code&gt;python=3.7&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Entre las dependencias&amp;nbsp;encontramos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pygments&lt;/strong&gt;: facilitar√° el coloreado de sint√°xis de c√≥digo &lt;em&gt;coconut&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;watchdog&lt;/strong&gt;: chequea de cambios en ficheros para automatizar&amp;nbsp;recompilaciones&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pyparsing&lt;/strong&gt;/&lt;strong&gt;cpyparsing&lt;/strong&gt;: &lt;em&gt;parseo&lt;/em&gt; de texto, utilizado por el traspilador y el interface de l√≠nea de comandos. Se fija la versi√≥n de &lt;code&gt;pyparsing=2.2.0&lt;/code&gt; ya que daba algunos fallos dentro de &lt;code&gt;jupyter console&lt;/code&gt; con versiones superiores&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cPyparsing&lt;/code&gt; es una versi√≥n optimizada de &lt;code&gt;pyparsing&lt;/code&gt;. Su instalaci√≥n necesita los compiladores de C apropiados para la creaci√≥n m√≥dulos python para el sistema. Con linux, el entorno que uso, no hay problema; pero es posible que en windows d√© errores por no encontrar el compilador &lt;span class="caps"&gt;MS&lt;/span&gt; C++. Si no sabes c√≥mo se instala, siempre puedes quitar &lt;code&gt;cpyparsing&lt;/code&gt; del fichero &lt;code&gt;environment.yml&lt;/code&gt; para que siga usando &lt;code&gt;pyparsing&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dado que &lt;em&gt;coconut&lt;/em&gt; es un desarrollo muy activo, tambi√©n recomiendo la instalaci√≥n de una versi√≥n de desarrollo de &lt;em&gt;coconut&lt;/em&gt;. Muchas veces, los problemas encontrados pueden estar resueltos en desarrollo. Pero siempre es interesante probar las novedades que se van a a√±adiendo y nunca est√° de m√°s animarse a contribuir en posibles&amp;nbsp;mejoras.&lt;/p&gt;
&lt;p&gt;El entorno de desarrollo estar√° definio&amp;nbsp;as√≠:&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption&gt;&lt;span class="liquid-tags-code-title"&gt;Entorno virtual &amp;#8216;cocodev&amp;#8217;&lt;/span&gt;&lt;a href='/code/2019Q2/environment-dev.yml'&gt;download&lt;/a&gt;&lt;/figcaption&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cocodev&lt;/span&gt;
&lt;span class="nt"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;defaults&lt;/span&gt;
&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python=3&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;coconut-develop[dev]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;coconut-prelude&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/figure&gt;
&lt;p&gt;La instalaci√≥n de &lt;em&gt;coconut&lt;/em&gt; y sus dependencias para este entorno se delega totalmente en pip. Se a√±ade el m√≥dulo &lt;code&gt;coconut-prelude&lt;/code&gt; que nos facilita un mecanismo similar al &lt;code&gt;Prelude&lt;/code&gt; de haskell para tener un entorno configurado con las funciones m√°s habituales en programaci√≥n&amp;nbsp;funcional.&lt;/p&gt;
&lt;p&gt;Con estos dos ficheros, se crean los entornos&amp;nbsp;virtuales:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ conda env create -f environment.yml
...
$ conda env create -f environment-dev.yml
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Primer contacto: Hola&amp;nbsp;Mundo&lt;/h2&gt;
&lt;p&gt;Para ejecutar coconut, se debe activar primero el&amp;nbsp;entorno:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ conda activate coco
$ coconut
Coconut Interpreter:
(type &amp;#39;exit()&amp;#39; or press Ctrl-D to end)
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sale una interface de l√≠nea de comando similar a la que tiene python, incluso se puede introducir c√≥digo python&amp;nbsp;normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;¬°Hola, Mundo!&amp;quot;)
¬°Hola, Mundo!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En &lt;em&gt;coconut&lt;/em&gt;, √©ste ser√≠a nuestro &lt;em&gt;&amp;#8220;Hola Mundo&amp;#8221;&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &amp;quot;¬°Hola, Mundo!&amp;quot; |&amp;gt; print
¬°Hola, Mundo!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;El operador &lt;code&gt;|&amp;gt;&lt;/code&gt; puede verse como un &lt;em&gt;pipe&lt;/em&gt; que encadena operaciones, una tras otra, que ser√° de uso com√∫n. Se puede describir como una &lt;em&gt;&amp;#8220;aplicaci√≥n del resultado de la izquierda en la expresi√≥n de la derecha&amp;#8221;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por poner ejemplos de aplicaciones en&amp;nbsp;cadena:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &amp;quot;¬°Hola, Mundo!&amp;quot; |&amp;gt; len |&amp;gt; print
13
&amp;gt;&amp;gt;&amp;gt; &amp;quot;¬°Hola, Mundo!&amp;quot; |&amp;gt; list |&amp;gt; print
[&amp;#39;¬°&amp;#39;, &amp;#39;H&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;,&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;M&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;!&amp;#39;]
&amp;gt;&amp;gt;&amp;gt; &amp;quot;¬°Hola, Mundo!&amp;quot; |&amp;gt; print |&amp;gt; print
¬°Hola, Mundo!
None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Probemos la ejecuci√≥n de ficheros. Los ficheros de &lt;em&gt;coconut&lt;/em&gt; tienen por extensi√≥n &lt;code&gt;.coco&lt;/code&gt;. Creemos un fichero &lt;code&gt;hola.coco&lt;/code&gt; con una √∫nica&amp;nbsp;l√≠nea:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;¬°Hola, Mundo!&amp;quot; |&amp;gt; print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para&amp;nbsp;ejecutarlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ coconut --run hola.coco
Compiling         hola.coco ...
Compiled to       hola.py .
¬°Hola, Mundo!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;De la &lt;em&gt;transpilaci√≥n&lt;/em&gt; se obtiene el fichero &lt;code&gt;hola.py&lt;/code&gt;, que es el que se usa en la ejecuci√≥n. Se podr√≠a volver a ejecutar sin intervenci√≥n de &lt;em&gt;coconut&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python hola.py
¬°Hola, Mundo!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Factorial en&amp;nbsp;coconut&lt;/h2&gt;
&lt;p&gt;Como obsesi√≥n de este blog est√° la comparaci√≥n de formas de hacer el c√°lculo del factorial. Recomiendo seguir el &lt;a href="https://coconut.readthedocs.io/en/master/HELP.html" title="Tutorial de coconut"&gt;tutorial de coconut&lt;/a&gt; donde se detalla, paso a paso, c√≥mo ir cambiando la formulaci√≥n de factorial desde estructuras imperativas a&amp;nbsp;funcionales.&lt;/p&gt;
&lt;p&gt;Una formulaci√≥n simple podr√≠a ser&amp;nbsp;esta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;def product(lst: int[]) -&amp;gt; int = reduce((*), lst)
def factorial(n: int) -&amp;gt; int = range(2, n+1) |&amp;gt; product

10000 |&amp;gt; factorial |&amp;gt; print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aunque las veremos con detalle m√°s adelante, aqu√≠ adelantamos varias caracter√≠sticas de &lt;em&gt;coconut&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una funci√≥n puede devolver una expresi√≥n, similar a las funciones &lt;em&gt;lambda&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;La funci√≥n &lt;code&gt;reduce&lt;/code&gt; est√° disponible por defecto (importante en programaci√≥n&amp;nbsp;funcional)&lt;/li&gt;
&lt;li&gt;Se usa el operador multiplicaci√≥n como &lt;code&gt;(*)&lt;/code&gt; (&lt;em&gt;al estilo haskell&lt;/em&gt;) sin necesidar de importarlo del m√≥dulo &lt;code&gt;operator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Se usa una notaci√≥n de tipos extendida con &lt;code&gt;int[]&lt;/code&gt; para hacer referencia a una &lt;em&gt;lista de enteros&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La &lt;em&gt;notaci√≥n de tipos&lt;/em&gt; es en realidad parte de &lt;em&gt;python 3&lt;/em&gt;, lo √∫nico que hace &lt;em&gt;coconut&lt;/em&gt; es facilitar su uso con una notaci√≥n&amp;nbsp;extendida.&lt;/p&gt;
&lt;p&gt;Si es la primera vez que ves &lt;em&gt;programaci√≥n funcional&lt;/em&gt;, seguramente no entiendas nada. Pronto tendr√° todo sentido y te empezar√°s a preguntar porqu√© no la conocistes&amp;nbsp;antes.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Este problema tambi√©n lo tiene la instalaci√≥n de coconut para &lt;strong&gt;python 2&lt;/strong&gt;. En este caso, la simple ejecuci√≥n del interface de l√≠nea de comando sobra para entrar en un bucle sin fin que agote r√°pidamente la memoria y bloquee todo el equipo. Forzar la versi√≥n a &lt;code&gt;pyparsing=2.2.0&lt;/code&gt; solventa el problema.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coconut"></category><category term="coconut"></category><category term="functional-programming"></category><category term="python"></category></entry><entry><title>¬øQu√© es un¬†coconut?</title><link href="https://chemacortes.github.io/2019/04/16/que-es-un-coconut/" rel="alternate"></link><published>2019-04-16T00:00:00+02:00</published><updated>2019-04-16T00:51:57+02:00</updated><author><name>Chema Cort√©s</name></author><id>tag:chemacortes.github.io,2019-04-16:/2019/04/16/que-es-un-coconut/</id><summary type="html">&lt;p&gt;Inicio de unos art√≠culos dedicados al lenguaje coconut, un lenguaje funcional totalmente &lt;em&gt;pyth√≥nico&lt;/em&gt;, y otras novedades para este nuevo reinicio del&amp;nbsp;blog.&lt;/p&gt;</summary><content type="html">&lt;div class="admonition type"&gt;
&lt;p class="admonition-title"&gt;&amp;#8230;and now for something completely&amp;nbsp;different&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Python&amp;nbsp;multiparadigma&lt;/h2&gt;
&lt;p&gt;La primera vez que o√≠ hablar de python all√≠ por finales del siglo pasado, una cosa que me encant√≥ es que se defin√≠a como &lt;em&gt;lenguaje multiparadigma&lt;/em&gt; combinandao el clasicismo de los lenguajes imperativos con la novedosa (entonces) &lt;em&gt;orientaci√≥n a objetos&lt;/em&gt; y con algunas caracter√≠sticas &lt;em&gt;funcionales&lt;/em&gt; a√±adidas que lo hac√≠an √∫nico. El tiempo ha ido puliendo el lenguaje y la programaci√≥n funcional se ha ido arrinconando hacia algunos m√≥dulos o, directamente, han desaparecido. El propio creador del lenguaje, Guido von Rossum, lleg√≥ a pensar en &lt;a href="https://www.artima.com/weblogs/viewpost.jsp?thread=98196" title="The fate of reduce() in Python 3000"&gt;eliminar todo rastro&lt;/a&gt;, aunque finalmente s√≥lo desterr√≥ la funci√≥n &lt;code&gt;reduce&lt;/code&gt; al m√≥dulo &lt;code&gt;functools&lt;/code&gt; alegando que no era una caracter√≠stica que entendiera ni usar un programador&amp;nbsp;python.&lt;/p&gt;
&lt;p&gt;Es una pena. La &lt;em&gt;Programaci√≥n Imperativa&lt;/em&gt; impuesta como √∫nico modo de aprender a programar, sin base para cambiar luego hacia los otros dos paradigmas. Cuando se introdujo la &lt;em&gt;Programaci√≥n Orientada a Objetos&lt;/em&gt; con los interfaces gr√°ficos, se emple√≥ mal. Los objetos fueron tamizados por la programaci√≥n imperativa para verse como sacos de procedimientos que compart√≠an unas mismas variables de estado. La &lt;em&gt;Programaci√≥n Funcional&lt;/em&gt;, a pesar de estar presente desde el principio de la historia de la inform√°tica, a pesar de ser la que m√°s pr√≥xima al pensamiento matem√°tico, qued√≥ fuera del entendimiento de los&amp;nbsp;programadores.&lt;/p&gt;
&lt;p&gt;Pero la tendencia se est√° inviertiendo. Hoy en d√≠a es imprescidible la ejecuci√≥n concurrente, ya sea para aprovechar las CPUs multin√∫cleo de nuestros dispositivos, ya sea porque necesitamos atender un alto n√∫mero de peticiones concurrentes. La programaci√≥n imperativa ya no es apropiada cuando varios hilos de ejecuci√≥n se acoplan e interfieren entre s√≠ por los mismos recursos. La programaci√≥n imperativa se hace menos determinista en estos casos y los fallos son imposibles de repetir de una ejecuci√≥n a&amp;nbsp;otra.&lt;/p&gt;
&lt;p&gt;La programaci√≥n funcional, dentro de lo complejo que sea de entender sus premisas a un programador tradicional, es la √∫nica que permite razonar l√≥gicamente sobre la ejecuci√≥n de un programa&amp;nbsp;concurrente.&lt;/p&gt;
&lt;h2&gt;¬øQu√© es un&amp;nbsp;coconut?&lt;/h2&gt;
&lt;p&gt;Python ha avanzando mucho estos a√±os. Es el principal lenguaje usado en ciencia y ense√±anza. Los &lt;em&gt;makers&lt;/em&gt; lo tienen en sus sistemas empotrados como microbit, raspberries pi y similares. Y pronto completar√° el hito de abandonar la versi√≥n 2 para pasar definitivamente a la versi√≥n 3, incluyendo entre sus novedades las instrucciones nuevas para la concurrencia y el&amp;nbsp;multiproceso.&lt;/p&gt;
&lt;p&gt;Para mi gusto, a python le falta un sistema de tipos m√°s potente y tener caracter√≠sticas funcionales. Para lo primero, hay avances con el &lt;em&gt;&amp;#8220;tipado gradual&amp;#8221;&lt;/em&gt;, soportado por varios IDEs que ayuda mucho en la codificaci√≥n. Para la programaci√≥n funcional, python cuenta con algunos m√≥dulos como &lt;code&gt;itertools&lt;/code&gt; y &lt;code&gt;functools&lt;/code&gt;, pero no deja de ser algo&amp;nbsp;testimonial.&lt;/p&gt;
&lt;p&gt;Pero he descubierto un nuevo lenguaje funcional &lt;em&gt;pythonico&lt;/em&gt;: &lt;a href="http://coconut-lang.org/" title="Coconut Language"&gt;coconut&lt;/a&gt;. Aunque sigo recomendando empezar a programar con un verdadero lenguaje funcional como haskell para evitar adquirir vicios, con coconut se puede tener lo mejor de los dos mundos sin renunciar a usar&amp;nbsp;python.&lt;/p&gt;
&lt;p&gt;Me he animado a aprender coconut e ir creando peque√±os art√≠culos a medida que vaya aprendiendo. Intentar√© hacer comparaciones con otros lenguajes como haskell, scala o typescript, ya que son los otros lenguajes que estoy empleando frecuentemente, adem√°s de&amp;nbsp;python.&lt;/p&gt;
&lt;p&gt;Sobre el nombre de &lt;em&gt;coconut&lt;/em&gt; para un lenguaje &lt;em&gt;pyth√≥nico&lt;/em&gt;, hay que recordar que todo lo relativo a &lt;em&gt;python&lt;/em&gt; proviene de las comedias del grupo humor√≠stico &amp;#8220;Monty&amp;nbsp;Python&amp;#8221;:&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                    &lt;iframe width="640" height="390"
                        src='https://www.youtube.com/embed/Fhnjqy8JvEs'
                        frameborder='0' webkitAllowFullScreen
                        mozallowfullscreen allowFullScreen&gt;
                    &lt;/iframe&gt;
                &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Pero para los que tenemos ya una edad, &lt;em&gt;coconut&lt;/em&gt; siempre &lt;em&gt;ser√°s t√∫&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                    &lt;iframe width="640" height="390"
                        src='https://www.youtube.com/embed/xwFp6THEddE'
                        frameborder='0' webkitAllowFullScreen
                        mozallowfullscreen allowFullScreen&gt;
                    &lt;/iframe&gt;
                &lt;/span&gt;&lt;/p&gt;</content><category term="Coconut"></category><category term="coconut"></category><category term="functional-programming"></category></entry></feed>